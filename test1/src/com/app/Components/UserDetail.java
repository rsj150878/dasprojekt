package com.app.Components;

import java.sql.SQLException;
import java.util.Locale;

import microsoft.exchange.webservices.data.ConflictResolutionMode;
import microsoft.exchange.webservices.data.Contact;
import microsoft.exchange.webservices.data.EmailAddress;
import microsoft.exchange.webservices.data.EmailAddressDictionary;
import microsoft.exchange.webservices.data.EmailAddressKey;
import microsoft.exchange.webservices.data.ExchangeCredentials;
import microsoft.exchange.webservices.data.ExchangeService;
import microsoft.exchange.webservices.data.ExchangeVersion;
import microsoft.exchange.webservices.data.FindItemsResults;
import microsoft.exchange.webservices.data.Folder;
import microsoft.exchange.webservices.data.IAutodiscoverRedirectionUrl;
import microsoft.exchange.webservices.data.ItemId;
import microsoft.exchange.webservices.data.ItemView;
import microsoft.exchange.webservices.data.PhysicalAddressEntry;
import microsoft.exchange.webservices.data.PhysicalAddressKey;
import microsoft.exchange.webservices.data.WebCredentials;
import microsoft.exchange.webservices.data.WellKnownFolderName;

import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContext;
import org.springframework.security.core.context.SecurityContextHolder;

import com.app.Components.Listener.HundDetailListener;
import com.app.Components.Listener.UserDetailListener;
import com.app.EmailSender.EwsReplClass;
import com.app.bean.LandBean;
import com.app.dbIO.DBConnection;
import com.app.enumPackage.LandEnum;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.data.util.filter.Compare.Equal;
import com.vaadin.data.util.sqlcontainer.SQLContainer;
import com.vaadin.data.util.sqlcontainer.query.TableQuery;
import com.vaadin.server.UserError;
import com.vaadin.shared.ui.datefield.Resolution;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.AbstractSelect.ItemCaptionMode;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.TextField;

public class UserDetail extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private CheckBox newsletter;
	@AutoGenerated
	private Button Abbruch;
	@AutoGenerated
	private Button ok;
	@AutoGenerated
	private Button replExchange;
	@AutoGenerated
	private TextField email;
	@AutoGenerated
	private ComboBox land;
	@AutoGenerated
	private PopupDateField gebdat;
	@AutoGenerated
	private TextField Ort;
	@AutoGenerated
	private TextField plz;
	@AutoGenerated
	private TextField hnr;
	@AutoGenerated
	private TextField Strasse;
	@AutoGenerated
	private TextField Vorname;
	@AutoGenerated
	private TextField nachname;

	@AutoGenerated
	private TextField oerc_mitgliedsnummer;
	@AutoGenerated
	private TextField telnr;
	@AutoGenerated
	private TextField mobnr;

	private SQLContainer personContainer;
	private SQLContainer userContainer;

	private Item personItem;
	private Item userItem;

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	@SuppressWarnings("deprecation")
	public UserDetail() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		
		// TODO add user code here

		this.gebdat.setLocale(new Locale("de", "DE"));
		this.gebdat.setResolution(Resolution.DAY);

		UserDetailListener listener = new UserDetailListener();
		this.ok.setId("ok");
		this.ok.addClickListener(listener);
		this.Abbruch.setId("abbruch");
		this.Abbruch.addClickListener(listener);

		TableQuery q1 = new TableQuery("person",
				DBConnection.INSTANCE.getConnectionPool());
		q1.setVersionColumn("version");

		TableQuery q2 = new TableQuery("user",
				DBConnection.INSTANCE.getConnectionPool());
		q2.setVersionColumn("version");

		try {
			personContainer = new SQLContainer(q1);
			userContainer = new SQLContainer(q2);

			SecurityContext context = SecurityContextHolder.getContext();
			Authentication authentication = context.getAuthentication();
			String username = authentication.getName();

			userContainer.addContainerFilter(new Equal("email", username));

			personContainer.addContainerFilter(new Equal("iduser",
					userContainer.getItem(userContainer.firstItemId())
							.getItemProperty("iduser").getValue()));
			Object persItemID = personContainer.firstItemId();

			this.personItem = personContainer.getItem(persItemID);
			this.userItem = userContainer.getItem(userContainer.firstItemId());

			setInit();

		} catch (SQLException e) {

		}

		replExchange.addClickListener(new ClickListener() {

			@Override
			public void buttonClick(ClickEvent event) {
				// TODO Auto-generated method stub
				EwsReplClass.INSTANCE.speichereVerknuefung(personItem);

			}

		});

	}

	public UserDetail(Item personItemx) {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here

		this.personItem = personItemx;

		this.gebdat.setLocale(new Locale("de", "DE"));
		this.gebdat.setResolution(Resolution.DAY);

		HundDetailListener listener = new HundDetailListener();
		this.ok.setId("ok");
		this.ok.addClickListener(listener);

		this.Abbruch.setId("abbruch");
		this.Abbruch.addClickListener(listener);

		setInit();
		
		replExchange.addClickListener(new ClickListener() {

			@Override
			public void buttonClick(ClickEvent event) {
				// TODO Auto-generated method stub
				EwsReplClass.INSTANCE.speichereVerknuefung(personItem);
//				
			}

		});


	}

	public void setInit() {
		this.nachname.setPropertyDataSource(personItem
				.getItemProperty("nachname"));
		this.Vorname.setPropertyDataSource(personItem
				.getItemProperty("vorname"));
		this.gebdat
				.setPropertyDataSource(personItem.getItemProperty("geb_dat"));
		this.Strasse.setPropertyDataSource(personItem
				.getItemProperty("strasse"));
		this.hnr.setPropertyDataSource(personItem.getItemProperty("hausnummer"));
		this.plz.setPropertyDataSource(personItem.getItemProperty("plz"));
		this.Ort.setPropertyDataSource(personItem.getItemProperty("ort"));
		this.email.setPropertyDataSource(personItem.getItemProperty("email"));

		this.oerc_mitgliedsnummer.setPropertyDataSource(personItem
				.getItemProperty("oerc_mitgliedsnummer"));
		this.telnr.setPropertyDataSource(personItem.getItemProperty("telnr"));
		this.mobnr.setPropertyDataSource(personItem.getItemProperty("mobnr"));

		this.newsletter.setValue(personItem.getItemProperty("newsletter")
				.getValue() == null
				|| personItem.getItemProperty("newsletter").getValue()
						.toString().equals(new String("J")) ? true : false);

		this.newsletter.addValueChangeListener(new ValueChangeListener() {

			@Override
			public void valueChange(ValueChangeEvent event) {
				// TODO Auto-generated method stub
				personItem.getItemProperty("newsletter").setValue(
						(newsletter.getValue() == true) ? new String("J")
								: new String("N"));
			}

		});

		buildLandCombobox();

	}

	public void buildLandCombobox() {
		BeanItemContainer<LandBean> container = new BeanItemContainer<LandBean>(
				LandBean.class);

		LandBean selItem = null;
		for (LandEnum o : LandEnum.values()) {
			LandBean addObject = new LandBean(o.getLandKurzBezeichnung(),
					o.getLandLangBezeichnung());

			container.addItem(addObject);
			if (personItem.getItemProperty("land").getValue() != null
					&& o.getLandKurzBezeichnung().equals(
							personItem.getItemProperty("land").getValue()
									.toString())) {
				selItem = addObject;
			}

		}

		this.land.setContainerDataSource(container);
		this.land.setItemCaptionMode(ItemCaptionMode.PROPERTY);
		this.land.setItemCaptionPropertyId("landLangBezeichnung");


		if (selItem != null) {
			this.land.setValue(selItem);
		}

		this.land.setImmediate(true);
		this.land.addValueChangeListener(new ValueChangeListener() {

			@Override
			public void valueChange(ValueChangeEvent event) {
				// TODO Auto-generated method stub

				personItem.getItemProperty("land").setValue(
						((LandBean) land.getValue()).getLandKurzBezeichnung());

			}

		});

	}

	public AbsoluteLayout getMainLayout() {
		return mainLayout;
	}

	public Button getAbbruch() {
		return Abbruch;
	}

	public Button getOk() {
		return ok;
	}

	public ComboBox getLand() {
		return land;
	}

	public PopupDateField getGebdat() {
		return gebdat;
	}

	public TextField getOrt() {
		return Ort;
	}

	public TextField getPlz() {
		return plz;
	}

	public TextField getHnr() {
		return hnr;
	}

	public TextField getStrasse() {
		return Strasse;
	}

	public TextField getVorname() {
		return Vorname;
	}

	public TextField getNachname() {
		return nachname;
	}

	public SQLContainer getPersonContainer() {
		return personContainer;
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		// nachname
		nachname = new TextField("Nachname");
		nachname.setImmediate(true);
		nachname.setDescription("Nachname");
		nachname.setWidth("-1px");
		nachname.setHeight("-1px");
		nachname.setInputPrompt("Nachname");
		nachname.setMaxLength(45);
		mainLayout.addComponent(nachname, "top:40.0px;left:40.0px;");

		// Vorname
		Vorname = new TextField("Vorname");
		Vorname.setImmediate(true);
		Vorname.setDescription("Vorname");
		Vorname.setWidth("-1px");
		Vorname.setHeight("-1px");
		Vorname.setInputPrompt("Vorname");
		Vorname.setMaxLength(45);
		Vorname.setNullRepresentation("bitte vornamen eingeben");
		mainLayout.addComponent(Vorname, "top:40.0px;left:220.0px;");

		// Strasse
		Strasse = new TextField("Strasse");
		Strasse.setImmediate(true);
		Strasse.setDescription("Strasse");
		Strasse.setWidth("-1px");
		Strasse.setHeight("-1px");
		Strasse.setInputPrompt("Strasse");
		Strasse.setMaxLength(45);
		Strasse.setNullRepresentation("bitte strasse eingeben");
		mainLayout.addComponent(Strasse, "top:80.0px;left:40.0;");

		// hnr
		hnr = new TextField("Haus-/Türnummer");
		hnr.setImmediate(false);
		hnr.setDescription("Hausnummer");
		hnr.setWidth("-1px");
		hnr.setHeight("-1px");
		hnr.setInputPrompt("Hausnummer inkl. Türnummer");
		hnr.setMaxLength(45);
		hnr.setNullRepresentation("bitte hausnummer eingeben");
		mainLayout.addComponent(hnr, "top:80.0px;left:220.0px;");

		// plz
		plz = new TextField("PLZ");
		plz.setImmediate(false);
		plz.setDescription("PLZ");
		plz.setWidth("-1px");
		plz.setHeight("-1px");
		plz.setInputPrompt("PLZ");
		plz.setMaxLength(10);
		plz.setNullRepresentation("bitte PLZ eingeben");
		mainLayout.addComponent(plz, "top:120.0px;left:40.0px;");

		// Ort
		Ort = new TextField("Ort");
		Ort.setImmediate(true);
		Ort.setDescription("Ort");
		Ort.setWidth("-1px");
		Ort.setHeight("-1px");
		Ort.setInputPrompt("Ort");
		Ort.setMaxLength(45);
		Ort.setNullRepresentation("bitte Ort eingeben");
		mainLayout.addComponent(Ort, "top:120.0px;left:220.0px;");

		// gebdat
		gebdat = new PopupDateField("Geburtsdatum");
		gebdat.setImmediate(true);
		gebdat.setDescription("Geburtsdatum");
		gebdat.setWidth("-1px");
		gebdat.setHeight("-1px");
		mainLayout.addComponent(gebdat, "top:160.0px;left:40.0px;");

		// oerc-mitgliesnummer
		oerc_mitgliedsnummer = new TextField("ÖRC-Mitgliedsnummer");
		oerc_mitgliedsnummer.setImmediate(true);
		oerc_mitgliedsnummer.setDescription("ÖRC-Mitgliedsnummer");
		oerc_mitgliedsnummer.setWidth("-1px");
		oerc_mitgliedsnummer.setHeight("-1px");
		oerc_mitgliedsnummer.setInputPrompt("");
		oerc_mitgliedsnummer.setNullRepresentation("");
		mainLayout.addComponent(oerc_mitgliedsnummer,
				"top:160.0px;left:220.0px;");

		// land
		land = new ComboBox("Land");
		land.setImmediate(true);
		land.setDescription("Land");
		land.setWidth("-1px");
		land.setHeight("-1px");
		land.setNullSelectionAllowed(false);
		mainLayout.addComponent(land, "top:200.0px;left:40.0px;");

		// email
		email = new TextField("Email");
		email.setImmediate(true);
		email.setDescription("Email");
		email.setWidth("-1px");
		email.setHeight("-1px");
		email.setRequired(true);
		email.setNullRepresentation("bitte email eingeben");
		mainLayout.addComponent(email, "top:200.0px;left:220.0px;");

		// newsletter
		newsletter = new CheckBox();
		newsletter.setCaption("Newsletter");
		newsletter.setImmediate(true);
		newsletter.setDescription("Newsletter");
		newsletter.setWidth("-1px");
		newsletter.setHeight("-1px");
		mainLayout.addComponent(newsletter, "top:240.0px;left:40.0px;");

		// telnr
		telnr = new TextField("Telefonnummer");
		telnr.setCaption("Telefonnummer");
		telnr.setImmediate(true);
		telnr.setDescription("Telefonnummer");
		telnr.setWidth("-1px");
		telnr.setHeight("-1px");
		telnr.setNullRepresentation("");
		mainLayout.addComponent(telnr, "top:280.0px;left:40.0px;");

		// mobnr
		mobnr = new TextField("Mobilnummer");
		mobnr.setCaption("Mobilnummer");
		mobnr.setImmediate(true);
		mobnr.setDescription("Newsletter");
		mobnr.setWidth("-1px");
		mobnr.setHeight("-1px");
		mobnr.setNullRepresentation("");
		mainLayout.addComponent(mobnr, "top:280.0px;left:220.0px;");

		// ok
		ok = new Button();
		ok.setCaption("OK");
		ok.setImmediate(true);
		ok.setDescription("ok&Speichern");
		ok.setWidth("-1px");
		ok.setHeight("-1px");
		mainLayout.addComponent(ok, "top:320.0px;left:40.0px;");

		// ok
		replExchange = new Button();
		replExchange.setCaption("repl");
		replExchange.setImmediate(true);
		replExchange.setDescription("replmail");
		replExchange.setWidth("-1px");
		replExchange.setHeight("-1px");
		mainLayout.addComponent(replExchange, "top:320.0px;left:120.0px;");

		// Abbruch
		Abbruch = new Button();
		Abbruch.setCaption("Abbruch");
		Abbruch.setImmediate(true);
		Abbruch.setDescription("Abbruch");
		Abbruch.setWidth("-1px");
		Abbruch.setHeight("-1px");
		mainLayout.addComponent(Abbruch, "top:320.0px;left:220.0px;");
		
		

		return mainLayout;
	}
	
	static class RedirectionUrlCallback implements IAutodiscoverRedirectionUrl {
        public boolean autodiscoverRedirectionUrlValidationCallback(
                String redirectionUrl) {
            return redirectionUrl.toLowerCase().startsWith("https://");
        }
    }
	
	

}
