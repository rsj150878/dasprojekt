package com.app.Components;

import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;

import org.tepi.filtertable.FilterTreeTable;

import com.app.bean.VeranstaltungsBean;
import com.app.bean.VeranstaltungsTypenBean;
import com.app.dbIO.DBConnection;
import com.app.enumPackage.VeranstaltungsStufen;
import com.app.enumPackage.VeranstaltungsTypen;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.data.util.HierarchicalContainer;
import com.vaadin.data.util.filter.Compare.Equal;
import com.vaadin.data.util.sqlcontainer.RowId;
import com.vaadin.data.util.sqlcontainer.SQLContainer;
import com.vaadin.data.util.sqlcontainer.query.QueryDelegate;
import com.vaadin.data.util.sqlcontainer.query.QueryDelegate.RowIdChangeEvent;
import com.vaadin.data.util.sqlcontainer.query.TableQuery;
import com.vaadin.event.ItemClickEvent;
import com.vaadin.event.ItemClickEvent.ItemClickListener;
import com.vaadin.server.FontAwesome;
import com.vaadin.ui.AbstractSelect.ItemCaptionMode;
import com.vaadin.ui.Accordion;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.themes.ValoTheme;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.HorizontalSplitPanel;
import com.vaadin.ui.Label;
import com.vaadin.ui.Panel;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.Table;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

public class Veranstaltung extends CustomComponent implements
		QueryDelegate.RowIdChangeListener {

	private ComboBox veranstaltungsAuswahl;
	private Button neueVeranstaltung;
	private Button saveVeranstaltung;
	private ComboBox veranstaltungsTypFuerNeu;
	private TextField nameVeranstaltung;
	private TextField nameRichter;
	private TextField nameVeranstaltungsLeiter;
	private TextField veranstalter;
	private TextField veranstaltungsOrt;
	private PopupDateField datumVeranstaltung;

	private FilterTreeTable mitglieder;

	private Item currentVeranstaltung;

	private BeanItemContainer<VeranstaltungsTypenBean> typenContainer = new BeanItemContainer<VeranstaltungsTypenBean>(
			VeranstaltungsTypenBean.class);

	private BeanItemContainer<VeranstaltungsBean> veranstaltungsComboContainer = new BeanItemContainer<VeranstaltungsBean>(
			VeranstaltungsBean.class);

	private SQLContainer veranstaltungsContainer;
	private SQLContainer veranstaltungsStufenContainer;
	private SQLContainer personContainer;
	private SQLContainer hundContainer;
	private SQLContainer veranstaltungsTeilnehmer;

	private Item currentVeranstaltungsItem;

	private Accordion mainAccordion;

	private TableQuery q1;
	private TableQuery q2;
	private TableQuery q3;
	private TableQuery q4;
	private TableQuery q5;

	private RowId veranstaltungsId;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout mainLayout;

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public Veranstaltung() {

		// TODO add user code here

		q1 = new TableQuery("veranstaltung",
				DBConnection.INSTANCE.getConnectionPool());
		q1.setVersionColumn("version");

		q2 = new TableQuery("veranstaltungs_stufe",
				DBConnection.INSTANCE.getConnectionPool());
		q2.setVersionColumn("version");

		q3 = new TableQuery("veranstaltungs_teilnehmer",
				DBConnection.INSTANCE.getConnectionPool());
		q3.setVersionColumn("version");

		q4 = new TableQuery("person", DBConnection.INSTANCE.getConnectionPool());
		q4.setVersionColumn("version");

		q5 = new TableQuery("hund", DBConnection.INSTANCE.getConnectionPool());
		q5.setVersionColumn("version");

		try {
			veranstaltungsContainer = new SQLContainer(q1);
			veranstaltungsContainer.addRowIdChangeListener(this);

			veranstaltungsStufenContainer = new SQLContainer(q2);

			personContainer = new SQLContainer(q4);
			hundContainer = new SQLContainer(q5);

			veranstaltungsTeilnehmer = new SQLContainer(q3);

		} catch (SQLException e) {
			e.printStackTrace();
		}

		buildMainLayout();
		setCompositionRoot(mainLayout);

	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();

		mainLayout.setWidth("1000px");
		mainLayout.setHeight(null);
		mainLayout.setImmediate(false);
		// mainLayout.setMargin(true);

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		mainAccordion = new Accordion();
		mainAccordion.setSizeFull();

		// mainAccordion.addTab(createSecondPanel(), "Allgemein", null);
		// mainAccordion.addTab(createThirdPanel(), "Anmeldungen + Bewertungen",
		// null);

		mainLayout.addComponent(createFirstPanel());
		mainLayout.addComponent(mainAccordion);

		return mainLayout;
	}

	private Panel createFirstPanel() {
		Panel firstLinePanel = new Panel();
		GridLayout firstLinePanelLayout = new GridLayout(4, 1);
		firstLinePanelLayout.setWidth("60%");
		firstLinePanelLayout.setHeight("60%");

		veranstaltungsAuswahl = new ComboBox();
		veranstaltungsAuswahl.setImmediate(true);

		if (veranstaltungsContainer.getItemIds() != null) {
			for (Object zw : veranstaltungsContainer.getItemIds()) {
				DateFormat format = new SimpleDateFormat("dd.MM.yyyy");
				VeranstaltungsBean x = new VeranstaltungsBean(
						veranstaltungsContainer.getItem(zw)
								.getItemProperty("name").getValue()
								+ "("
								+ format.format(veranstaltungsContainer
										.getItem(zw).getItemProperty("datum")
										.getValue()) + ")",
						veranstaltungsContainer.getItem(zw));

				veranstaltungsComboContainer.addItem(x);
			}
		}

		veranstaltungsAuswahl
				.setContainerDataSource(veranstaltungsComboContainer);
		veranstaltungsAuswahl.setItemCaptionMode(ItemCaptionMode.PROPERTY);
		veranstaltungsAuswahl.setItemCaptionPropertyId("showName");

		veranstaltungsAuswahl.addValueChangeListener(new ValueChangeListener() {

			@Override
			public void valueChange(ValueChangeEvent event) {
				mainAccordion.removeAllComponents();
				currentVeranstaltungsItem = ((VeranstaltungsBean) veranstaltungsAuswahl
						.getValue()).getDbItem();
				mainAccordion.addTab(createSecondPanel(), "Allgemein", null);
				mainAccordion.addTab(createThirdPanel(),
						"Anmeldungen + Bewertungen", null);
				System.out.println("in value change listner");
				commit();

			}

		});
		firstLinePanelLayout.addComponent(veranstaltungsAuswahl, 0, 0);

		neueVeranstaltung = new Button();
		neueVeranstaltung.setCaption("neue Veranstaltung");
		neueVeranstaltung.setImmediate(true);
		neueVeranstaltung.setHeight("-1px");
		neueVeranstaltung.setWidth("-1px");

		neueVeranstaltung.addClickListener(new ClickListener() {

			@Override
			public void buttonClick(ClickEvent event) {
				// TODO Auto-generated method stub
				VeranstaltungsTypenBean xx = (VeranstaltungsTypenBean) veranstaltungsTypFuerNeu
						.getValue();

				Object zwVeranstaltung = veranstaltungsContainer.addItem();
				currentVeranstaltungsItem = veranstaltungsContainer
						.getItem(zwVeranstaltung);
				currentVeranstaltungsItem.getItemProperty("typ").setValue(
						xx.getVeranstaltungsTyp());
				currentVeranstaltungsItem.getItemProperty("name").setValue(
						"neue Veranstaltung");
				currentVeranstaltungsItem.getItemProperty("richter").setValue(
						"neuer Richter");
				currentVeranstaltungsItem.getItemProperty("veranstalter")
						.setValue("neuer Richter");
				currentVeranstaltungsItem.getItemProperty("veranstaltungsort")
						.setValue("neuer Veranstaltungsort");
				currentVeranstaltungsItem.getItemProperty(
						"veranstaltungsleiter").setValue(
						"neuer Veranstaltungsleiter");
				currentVeranstaltungsItem.getItemProperty("datum").setValue(
						new Date());

				// notwndig f√ºr id
				commit();

				for (Integer stufe : xx.getVeranstaltungsStufen()) {
					Object zwVeranstaltungsStufe = veranstaltungsStufenContainer
							.addItem();
					Item zwVeranstaltungsItem = veranstaltungsStufenContainer
							.getItemUnfiltered(zwVeranstaltungsStufe);
					zwVeranstaltungsItem.getItemProperty("id_veranstaltung")
							.setValue(
									currentVeranstaltungsItem.getItemProperty(
											"id_veranstaltung").getValue());
					zwVeranstaltungsItem.getItemProperty("stufen_typ")
							.setValue(stufe);

				}

				commit();

				VeranstaltungsBean x = new VeranstaltungsBean(
						"neue Veranstaltung", currentVeranstaltungsItem);
				veranstaltungsComboContainer.addItem(x);
				veranstaltungsAuswahl
						.setContainerDataSource(veranstaltungsComboContainer);
				veranstaltungsAuswahl.setValue(x);

			}

		});
		firstLinePanelLayout.addComponent(neueVeranstaltung, 1, 0);

		veranstaltungsTypFuerNeu = new ComboBox();
		veranstaltungsTypFuerNeu.setImmediate(true);

		firstLinePanelLayout.addComponent(veranstaltungsTypFuerNeu, 2, 0);

		for (VeranstaltungsTypen typ : VeranstaltungsTypen.values()) {
			VeranstaltungsTypenBean bean = new VeranstaltungsTypenBean(
					typ.getVeranstaltungsTypID(),
					typ.getVeranstaltungsTypBezeichnung(),
					typ.getVeranstaltungsStufen());

			typenContainer.addItem(bean);

		}

		veranstaltungsTypFuerNeu.setContainerDataSource(typenContainer);
		veranstaltungsTypFuerNeu.setItemCaptionMode(ItemCaptionMode.PROPERTY);
		veranstaltungsTypFuerNeu
				.setItemCaptionPropertyId("veranstaltungsBezeichnung");

		saveVeranstaltung = new Button();
		saveVeranstaltung.setCaption("save Veranstaltung");
		saveVeranstaltung.setImmediate(true);
		saveVeranstaltung.setHeight("-1px");
		saveVeranstaltung.setWidth("-1px");

		saveVeranstaltung.addClickListener(new ClickListener() {

			@Override
			public void buttonClick(ClickEvent event) {
				commit();

			}
		});

		firstLinePanelLayout.addComponent(saveVeranstaltung, 3, 0);
		firstLinePanel.setContent(firstLinePanelLayout);

		return firstLinePanel;
	}

	private Panel createSecondPanel() {
		Panel secondLine = new Panel();

		HorizontalLayout secondLineLayout = new HorizontalLayout();
		secondLineLayout.setWidth("100%");
		secondLineLayout.setHeight("100%");

		nameVeranstaltung = new TextField("Veranstaltungsname");
		nameVeranstaltung.setImmediate(true);
		nameVeranstaltung.setWidth("-1px");
		nameVeranstaltung.setHeight("-1px");
		nameVeranstaltung.setMaxLength(45);
		nameVeranstaltung.setNullRepresentation("neue Veranstaltung");
		nameVeranstaltung.setPropertyDataSource(currentVeranstaltungsItem
				.getItemProperty("name"));

		secondLineLayout.addComponent(nameVeranstaltung);

		nameVeranstaltungsLeiter = new TextField(
				"Veranstaltungs-/Pr√ºfungsleiter");
		nameVeranstaltungsLeiter.setImmediate(true);
		nameVeranstaltungsLeiter.setWidth("-1px");
		nameVeranstaltungsLeiter.setHeight("-1px");
		nameVeranstaltungsLeiter.setMaxLength(45);
		nameVeranstaltungsLeiter
				.setNullRepresentation("neuer Veranstaltungsleiter");
		nameVeranstaltungsLeiter
				.setPropertyDataSource(currentVeranstaltungsItem
						.getItemProperty("veranstaltungsleiter"));
		secondLineLayout.addComponent(nameVeranstaltungsLeiter);

		datumVeranstaltung = new PopupDateField("Datum der Veranstaltung");
		datumVeranstaltung.setImmediate(true);
		datumVeranstaltung.setWidth("-1px");
		datumVeranstaltung.setHeight("-1px");
		datumVeranstaltung.setPropertyDataSource(currentVeranstaltungsItem
				.getItemProperty("datum"));

		secondLineLayout.addComponent(datumVeranstaltung);

		nameRichter = new TextField("Name Richter");
		nameRichter.setImmediate(true);
		nameRichter.setWidth("-1px");
		nameRichter.setHeight("-1px");
		nameRichter.setMaxLength(45);
		nameRichter.setNullRepresentation("neuer Richter");
		nameRichter.setPropertyDataSource(currentVeranstaltungsItem
				.getItemProperty("richter"));
		secondLineLayout.addComponent(nameRichter);

		veranstalter = new TextField("Veranstalter");
		veranstalter.setImmediate(true);
		veranstalter.setWidth("-1px");
		veranstalter.setHeight("-1px");
		veranstalter.setMaxLength(45);
		veranstalter.setNullRepresentation("Veranstalter");
		veranstalter.setPropertyDataSource(currentVeranstaltungsItem
				.getItemProperty("veranstalter"));
		secondLineLayout.addComponent(veranstalter);

		veranstaltungsOrt = new TextField("Veranstaltungsort");
		veranstaltungsOrt.setImmediate(true);
		veranstaltungsOrt.setWidth("-1px");
		veranstaltungsOrt.setHeight("-1px");
		veranstaltungsOrt.setMaxLength(45);
		veranstaltungsOrt.setNullRepresentation("neuer Veranstaltungsort");
		veranstaltungsOrt.setPropertyDataSource(currentVeranstaltungsItem
				.getItemProperty("veranstaltungsort"));
		secondLineLayout.addComponent(veranstaltungsOrt);

		secondLine.setContent(secondLineLayout);

		return secondLine;
	}

	private HorizontalSplitPanel createThirdPanel() {
		HorizontalSplitPanel horizontalSplitPanel_1;

		// common part: create layout
		horizontalSplitPanel_1 = new HorizontalSplitPanel();
		horizontalSplitPanel_1.setImmediate(true);
		horizontalSplitPanel_1.setWidth("1000px");
		horizontalSplitPanel_1.setHeight("605px");
		horizontalSplitPanel_1.setSplitPosition(250, Unit.PIXELS);
		horizontalSplitPanel_1.setLocked(true);

		// Mitglieder
		mitglieder = new FilterTreeTable();
		mitglieder.setImmediate(true);
		mitglieder.setWidth("250px");
		mitglieder.setHeight("-1px");
		horizontalSplitPanel_1.addComponent(mitglieder);
		mitglieder.setContainerDataSource(createTreeContent());
		mitglieder.setVisibleColumns("Name");
		mitglieder.setFilterGenerator(new MitgliederFilterGenerator());
		mitglieder.setFilterDecorator(new MitgliederFilterDecorator());
		mitglieder.setSelectable(true);
		mitglieder.setFilterBarVisible(true);
		mitglieder.setNullSelectionAllowed(false);

		final TabSheet stufenSheet = new TabSheet();

		mitglieder.addItemClickListener(new ItemClickListener() {

			@Override
			public void itemClick(ItemClickEvent event) {
				if (event.isDoubleClick()) {
					// The item was double-clicked, event.getItem() returns the
					// target.
					HierarchicalContainer container = ((HierarchicalContainer) mitglieder
							.getContainerDataSource());
					System.out.println("event " + event.getItem());

					if (event.getItem().getItemProperty("KnotenArt").getValue()
							.equals(new Integer(1))) {

						AnmeldungsPanel selectedPanel = (AnmeldungsPanel) stufenSheet
								.getSelectedTab();

						selectedPanel.addAnmeldung((Item) container
								.getParent(mitglieder.getValue()),
								(Item) mitglieder.getValue());
					}

				}

			}

		});

		veranstaltungsStufenContainer.addContainerFilter(new Equal(
				"id_veranstaltung", currentVeranstaltungsItem.getItemProperty(
						"id_veranstaltung").getValue()));

		for (Object zw : veranstaltungsStufenContainer.getItemIds()) {

			AnmeldungsPanel myAnmeldungsPanel = new AnmeldungsPanel(
					VeranstaltungsStufen.getBezeichnungForId(new Integer(
							veranstaltungsStufenContainer.getItem(zw)
									.getItemProperty("stufen_typ").getValue()
									.toString())), currentVeranstaltungsItem,
					veranstaltungsStufenContainer.getItem(zw));

			stufenSheet.addTab(
					myAnmeldungsPanel,
					VeranstaltungsStufen.getBezeichnungForId(
							new Integer(veranstaltungsStufenContainer
									.getItem(zw).getItemProperty("stufen_typ")
									.getValue().toString())).getBezeichnung());

		}
		veranstaltungsStufenContainer.removeAllContainerFilters();
		horizontalSplitPanel_1.setSecondComponent(stufenSheet);

		return horizontalSplitPanel_1;
	}

	public HierarchicalContainer createTreeContent() {

		HierarchicalContainer container = new HierarchicalContainer();

		// A property that holds the caption is needed for
		// ITEM_CAPTION_MODE_PROPERTY

		container.addContainerProperty("Name", String.class, "");
		container.addContainerProperty("KnotenArt", Integer.class, "");
		container.addContainerProperty("FilterField", String.class, "");

		new Object() {

			public void put(SQLContainer data, Integer parentKnotenArt,
					Object parent, HierarchicalContainer container) {

				for (Object zw : data.getItemIds()) {

					if (parentKnotenArt.equals(1)) {

						// Support both ITEM_CAPTION_MODE_ID and
						// ITEM_CAPTION_MODE_PROPERTY

						container.addItem(hundContainer.getItem(zw));
						Item parentItem = (Item) parent;

						String hundeName = hundContainer.getItem(zw)
								.getItemProperty("zwingername").getValue()
								.toString();

						container.getItem(hundContainer.getItem(zw))
								.getItemProperty("Name").setValue(hundeName);

						hundeName = " - "
								+ container.getItem(parent)
										.getItemProperty("Name").getValue()
										.toString();

						container.getItem(hundContainer.getItem(zw))
								.getItemProperty("FilterField")
								.setValue(hundeName);
						container.getItem(hundContainer.getItem(zw))
								.getItemProperty("KnotenArt").setValue(1);

						container.setParent(hundContainer.getItem(zw), parent);
						container.setChildrenAllowed(hundContainer.getItem(zw),
								false);

					} else {

						if (parentKnotenArt.equals(0)) {

							// It's an Object[]
							// Object[] sub = (Object[]) data[i];
							// String name = (String) sub[0];
							// Support both ITEM_CAPTION_MODE_ID and
							// ITEM_CAPTION_MODE_PROPERTY
							hundContainer.addContainerFilter(new Equal(
									"idperson", personContainer.getItem(zw)
											.getItemProperty("idperson")
											.getValue()));

							String name = personContainer.getItem(zw)
									.getItemProperty("nachname").getValue()
									.toString()
									+ new String(" ")
									+ personContainer.getItem(zw)
											.getItemProperty("vorname")
											.getValue().toString();

							container.addItem(personContainer.getItem(zw));

							container.getItem(personContainer.getItem(zw))
									.getItemProperty("FilterField")
									.setValue(name);

							container.getItem(personContainer.getItem(zw))
									.getItemProperty("Name").setValue(name);

							container.getItem(personContainer.getItem(zw))
									.getItemProperty("KnotenArt").setValue(0);

							put(hundContainer, 1, personContainer.getItem(zw),
									container);
							container.setParent(personContainer.getItem(zw),
									parent);
							hundContainer.removeAllContainerFilters();
						}
					}

				}

			}

		}.put(personContainer, 0, null, container);

		return container;

	}

	private void commit() {
		try {
			veranstaltungsContainer.commit();
			veranstaltungsStufenContainer.commit();

			veranstaltungsContainer.refresh();
			veranstaltungsStufenContainer.refresh();

			if (veranstaltungsId != null) {
				veranstaltungsContainer.addContainerFilter(new Equal(
						"id_veranstaltung", veranstaltungsId.getId()[0]
								.toString()));
				currentVeranstaltungsItem = veranstaltungsContainer
						.getItem(veranstaltungsContainer.getIdByIndex(0));
				veranstaltungsContainer.removeAllContainerFilters();
			}

			veranstaltungsTeilnehmer.commit();

		} catch (SQLException ee) {
			ee.printStackTrace();
		}
	}

	@Override
	public void rowIdChange(RowIdChangeEvent event) {
		veranstaltungsId = event.getNewRowId();

	}

	private class AnmeldungsPanel extends CustomComponent {
		Item veranstaltung;
		Item veranstaltungsStufe;
		VeranstaltungsStufen defStufe;
		CheckBox bezahltBox;
		CheckBox bestandenBox;

		Table anmeldungsTable;

		HashMap<Object, Item> itemMap = new HashMap<Object, Item>();
		HashMap<Object, Object> delMap = new HashMap<Object, Object>();

		public AnmeldungsPanel(VeranstaltungsStufen defStufe,
				Item veranstaltung, Item veranstaltungsStufe) {
			// super();
			this.veranstaltung = veranstaltung;
			this.veranstaltungsStufe = veranstaltungsStufe;
			this.defStufe = defStufe;

			VerticalLayout anmeldungsPanelLayout = new VerticalLayout();
			anmeldungsPanelLayout.setWidth("750px");
			anmeldungsPanelLayout.setHeight("250px");

			anmeldungsTable = new Table();
			anmeldungsTable.setHeightUndefined();
			anmeldungsTable.addContainerProperty("besitzer", String.class, "",
					"Hundef√ºhrer", null, null);
			anmeldungsTable.addContainerProperty("hund", String.class, "",
					"Hund", null, null);
			anmeldungsTable.addContainerProperty("bezahlt", CheckBox.class,
					null, "bezahlt?", null, null);
			anmeldungsTable.addContainerProperty("bestanden", CheckBox.class,
					null, "bestanden?", null, null);

			if (defStufe == VeranstaltungsStufen.STUFE_BGH1
					|| defStufe == VeranstaltungsStufen.STUFE_BGH2
					|| defStufe == VeranstaltungsStufen.STUFE_BGH3) {
				anmeldungsTable.addContainerProperty("gespunkte",
						TextArea.class, "0", "Gesamtpunkte", null, null);
				anmeldungsTable.addContainerProperty("textbewertung",Label.class,null,"Bewertung",null,null);

			}
			anmeldungsTable.addContainerProperty("fuehrer", TextArea.class, "",
					"abw. Hundef√ºhrer", null, null);

			anmeldungsTable.addContainerProperty("del",Button.class,null,"del",null,null);
			
			veranstaltungsTeilnehmer.addContainerFilter(new Equal(
					"id_veranstaltung", veranstaltung.getItemProperty(
							"id_veranstaltung").getValue()));
			veranstaltungsTeilnehmer
					.addContainerFilter(new Equal("id_stufe",
							veranstaltungsStufe.getItemProperty("id_stufe")
									.getValue()));

			
			for (Object objTeilnehmer : veranstaltungsTeilnehmer.getItemIds()) {
				final Item currentItem = veranstaltungsTeilnehmer
						.getItem(objTeilnehmer);
				buildTableRow(currentItem);
				
				Integer size = delMap.size() + 1;
				delMap.put(size, objTeilnehmer);
				

			}
			veranstaltungsTeilnehmer.removeAllContainerFilters();

			// anmeldungsTable.setPageLength(anmeldungsTable.size());
			anmeldungsTable.setSizeFull();
			anmeldungsTable.setImmediate(true);
			anmeldungsPanelLayout.addComponent(anmeldungsTable);

			setCompositionRoot(anmeldungsPanelLayout);
		}

		public void addAnmeldung(Item person, Item hund) {
			Object neueAnmeldung = veranstaltungsTeilnehmer.addItem();
			final Item neueAnmeldungItem = veranstaltungsTeilnehmer
					.getItemUnfiltered(neueAnmeldung);
			neueAnmeldungItem.getItemProperty("id_person").setValue(
					person.getItemProperty("idperson").getValue());
			neueAnmeldungItem.getItemProperty("id_hund").setValue(
					hund.getItemProperty("idhund").getValue());
			neueAnmeldungItem.getItemProperty("id_veranstaltung").setValue(
					this.veranstaltung.getItemProperty("id_veranstaltung")
							.getValue());
			neueAnmeldungItem.getItemProperty("id_stufe").setValue(
					this.veranstaltungsStufe.getItemProperty("id_stufe")
							.getValue());
			neueAnmeldungItem.getItemProperty("bezahlt").setValue("N");
			neueAnmeldungItem.getItemProperty("bestanden").setValue("N");

			Integer size = delMap.size() + 1;
			delMap.put(size, neueAnmeldung);
			
			buildTableRow(neueAnmeldungItem);
			anmeldungsTable.setPageLength(anmeldungsTable.size());
		}

		public void buildTableRow(Item veranstaltungsTeilnehmerItem) {

			Integer size = itemMap.size() + 1;
			itemMap.put(size, veranstaltungsTeilnehmerItem);

			personContainer.addContainerFilter(new Equal("idperson",
					veranstaltungsTeilnehmerItem.getItemProperty("id_person")
							.getValue()));
			String besitzer = personContainer
					.getItem(personContainer.firstItemId())
					.getItemProperty("nachname").getValue().toString()
					+ " "
					+ personContainer.getItem(personContainer.firstItemId())
							.getItemProperty("vorname").getValue().toString();

			personContainer.removeAllContainerFilters();

			hundContainer.addContainerFilter(new Equal("idhund",
					veranstaltungsTeilnehmerItem.getItemProperty("id_hund")
							.getValue()));
			String hund = hundContainer.getItem(hundContainer.firstItemId())
					.getItemProperty("rufname").getValue().toString()
					+ " - "
					+ hundContainer.getItem(hundContainer.firstItemId())
							.getItemProperty("zwingername").getValue()
							.toString();
			hundContainer.removeAllContainerFilters();

			final CheckBox bezahltBox = new CheckBox();
			bezahltBox.setData(size);
			bezahltBox
					.setValue(veranstaltungsTeilnehmerItem
							.getItemProperty("bezahlt") == null
							|| veranstaltungsTeilnehmerItem
									.getItemProperty("bezahlt").getValue()
									.toString().equals(new String("J")) ? true
							: false);
			bezahltBox.setImmediate(true);
			bezahltBox.addValueChangeListener(new ValueChangeListener() {

				@Override
				public void valueChange(ValueChangeEvent event) {

					System.out.println("in event bezahlt");
					Item boxVeranstaltungsTeilnehmerItem = itemMap
							.get(bezahltBox.getData());
					System.out.println("Item: "
							+ boxVeranstaltungsTeilnehmerItem);
					boxVeranstaltungsTeilnehmerItem
							.getItemProperty("bezahlt")
							.setValue(
									(bezahltBox.getValue() == true) ? new String(
											"J") : new String("N"));

				}

			});

			final CheckBox bestandenBox = new CheckBox();
			bestandenBox.setData(size);
			bestandenBox.setValue(veranstaltungsTeilnehmerItem.getItemProperty(
					"bestanden").getValue() == null
					|| veranstaltungsTeilnehmerItem
							.getItemProperty("bestanden").getValue().toString()
							.equals(new String("J")) ? true : false);
			bestandenBox.setImmediate(true);
			bestandenBox.addValueChangeListener(new ValueChangeListener() {

				@Override
				public void valueChange(ValueChangeEvent event) {
					System.out.println("in event bestanden");
					Item boxVeranstaltungsTeilnehmerItem = itemMap
							.get(bestandenBox.getData());
					boxVeranstaltungsTeilnehmerItem
							.getItemProperty("bestanden")
							.setValue(
									(bestandenBox.getValue() == true) ? new String(
											"J") : new String("N"));

				}

			});

			final TextArea gesPunkte = new TextArea();
			gesPunkte.setPropertyDataSource(veranstaltungsTeilnehmerItem
					.getItemProperty("ges_punkte"));
			gesPunkte.setNullRepresentation("");
			gesPunkte.setImmediate(true);
			gesPunkte.setWidth("-1px");
			gesPunkte.setHeight("-1px");
			gesPunkte.setRows(1);
			gesPunkte.setData(size);
			gesPunkte.addValueChangeListener(new ValueChangeListener() {

				@Override
				public void valueChange(ValueChangeEvent event) {
					Integer id = (Integer) gesPunkte.getData();
					Label bewertungLabel = ((Label)anmeldungsTable.getContainerProperty(id,"textbewertung").getValue());
					Integer wert = 0;
					try {
						wert = Integer.parseInt(gesPunkte.getValue());
					} catch (NumberFormatException ignored ) {
						
					}
					
					if (wert.intValue() <= 69) {
						bewertungLabel.setValue("mangelhaft");
					} else if (wert.intValue() <= 79) {
						bewertungLabel.setValue("befriedigend");
					} else if (wert.intValue() <= 89) {
						bewertungLabel.setValue("gut");
					} else if (wert.intValue() <= 95){
						bewertungLabel.setValue("sehr gut");
					} else if (wert.intValue() <= 100) {
						bewertungLabel.setValue("vorz√ºglich");
					}
					
					
				}
				
			});

			final TextArea abwHundeFuehrer = new TextArea();
			abwHundeFuehrer.setPropertyDataSource(veranstaltungsTeilnehmerItem
					.getItemProperty("hundefuehrer"));
			abwHundeFuehrer.setRows(1);
			abwHundeFuehrer.setNullRepresentation("");
			abwHundeFuehrer.setImmediate(true);
			abwHundeFuehrer.setWidth("-1px");
			abwHundeFuehrer.setHeight("-1px");
			abwHundeFuehrer.setData(size);
			
			final Label bewertung = new Label();
			bewertung.setData(size);
			
			final Button delButton = new Button();
			delButton.setData(size);
			delButton.setIcon(FontAwesome.BITBUCKET);
			delButton.addStyleName(ValoTheme.BUTTON_ICON_ONLY);

			delButton.addClickListener(new ClickListener() {

				@Override
				public void buttonClick(ClickEvent event) {
					Item delItem = itemMap.get(delButton.getData());
					veranstaltungsTeilnehmer.removeItem(delMap.get(delButton.getData()));
					anmeldungsTable.removeItem(delButton.getData());
					
				}
				
			});
			if (defStufe == VeranstaltungsStufen.STUFE_BH) {
				anmeldungsTable.addItem(new Object[] { besitzer, hund,
						bezahltBox, bestandenBox, abwHundeFuehrer, delButton }, size);

			} else if (defStufe == VeranstaltungsStufen.STUFE_BGH1
					|| defStufe == VeranstaltungsStufen.STUFE_BGH2
					|| defStufe == VeranstaltungsStufen.STUFE_BGH3) {

				anmeldungsTable.addItem(new Object[] { besitzer, hund,
						bezahltBox, bestandenBox, gesPunkte,bewertung, abwHundeFuehrer, delButton },
						size);

			}

		}
	}
}
