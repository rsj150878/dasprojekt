package com.app.DashBoard.View;

import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Iterator;

import com.app.DashBoard.Component.VeranstaltungsTeilnehmerGrid;
import com.app.DashBoard.Event.DashBoardEventBus;
import com.app.DashBoardWindow.SearchWindow;
import com.app.components.WesensTestImporter;
import com.app.dbIO.DBConnection;
import com.app.dbIO.DBShowNeu;
import com.app.enumPackage.DokumentGehoertZuType;
import com.app.enumPackage.Rassen;
import com.app.enumPackage.VeranstaltungsStufen;
import com.app.enumPackage.VeranstaltungsTypen;
import com.app.filestorage.HundeDokumenteImporter;
import com.app.printClasses.BHMeldeBlatt;
import com.app.printClasses.BewertungsListeNeu;
import com.app.printClasses.JungHundePruefung2017;
import com.app.printClasses.StarterListe;
import com.app.printClasses.Urkunde;
import com.app.printClasses.UrkundeTrainingsWorkingtest;
import com.app.printClasses.WesentestBewertungsblatt;
import com.app.printClasses.WesentestFormwert;
import com.app.showData.Show;
import com.app.showData.ShowHund;
import com.app.showData.ShowRing;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Panel;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.TabSheet.SelectedTabChangeEvent;
import com.vaadin.ui.TabSheet.SelectedTabChangeListener;
import com.vaadin.ui.Upload;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.themes.ValoTheme;
import com.vaadin.v7.data.Item;
import com.vaadin.v7.data.Property;
import com.vaadin.v7.data.Property.ValueChangeEvent;
import com.vaadin.v7.data.Property.ValueChangeListener;
import com.vaadin.v7.data.util.filter.Compare.Equal;
import com.vaadin.v7.data.util.sqlcontainer.RowId;
import com.vaadin.v7.data.util.sqlcontainer.SQLContainer;
import com.vaadin.v7.data.util.sqlcontainer.query.QueryDelegate;
import com.vaadin.v7.data.util.sqlcontainer.query.QueryDelegate.RowIdChangeEvent;
import com.vaadin.v7.data.util.sqlcontainer.query.TableQuery;
import com.vaadin.v7.ui.PopupDateField;
import com.vaadin.v7.ui.Table;
import com.vaadin.v7.ui.TextField;

public class VeranstaltungsDetailViewNeu extends CustomComponent implements QueryDelegate.RowIdChangeListener {

	/**
	 * 
	 */
	private static final long serialVersionUID = -3128669844525510581L;
	private TextField nameVeranstaltung;
	private TextField nameRichter;
	private TextField nameVeranstaltungsLeiter;
	private TextField veranstalter;
	private TextField veranstaltungsOrt;
	private PopupDateField datumVeranstaltung;

	private TextField telnrLeiter;
	private TextField plzLeiter;
	private TextField strasseLeiter;
	private TextField ortLeiter;

	private SQLContainer veranstaltungsContainer;
	private SQLContainer veranstaltungsStufenContainer;
	private SQLContainer veranstaltungsTeilnehmer;

	private Item currentVeranstaltungsItem;

	private TableQuery q1;
	private TableQuery q2;
	private TableQuery q3;

	private RowId veranstaltungsId;

	private final VeranstaltungsDetailListener listener;

	@AutoGenerated
	private VerticalLayout mainLayout;

	Component currentPrintComponent = null;
	GridLayout secondLineLayout = null;
	VeranstaltungsTypen defTyp;

	private TabSheet stufenSheet;
	private WesensTestImporter receiver = new WesensTestImporter();;
	private HundeDokumenteImporter hundeDokumenteImporter = new HundeDokumenteImporter();

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public VeranstaltungsDetailViewNeu(VeranstaltungsTypen typ, Item currentVeranstaltungsItem,
			VeranstaltungsDetailListener listener) {

		// TODO add user code here

		this.currentVeranstaltungsItem = currentVeranstaltungsItem;
		this.listener = listener;
		this.defTyp = typ;
		buildMainLayout();

		Panel mainPanel = new Panel();
		mainPanel.setContent(mainLayout);
		mainPanel.setSizeFull();
		mainPanel.setStyleName(ValoTheme.PANEL_SCROLL_INDICATOR);

		setCompositionRoot(mainPanel);

	}

	private void buildMainLayout() {

		q1 = new TableQuery("veranstaltung", DBConnection.INSTANCE.getConnectionPool());
		q1.setVersionColumn("version");

		q2 = new TableQuery("veranstaltungs_stufe", DBConnection.INSTANCE.getConnectionPool());
		q2.setVersionColumn("version");

		q3 = new TableQuery("veranstaltungs_teilnehmer", DBConnection.INSTANCE.getConnectionPool());
		q3.setVersionColumn("version");

		try {
			veranstaltungsContainer = new SQLContainer(q1);

			veranstaltungsContainer.addContainerFilter(new Equal("id_veranstaltung",
					currentVeranstaltungsItem.getItemProperty("id_veranstaltung").getValue()));
			currentVeranstaltungsItem = veranstaltungsContainer.getItem(veranstaltungsContainer.firstItemId());
			veranstaltungsContainer.removeAllContainerFilters();

			veranstaltungsContainer.addRowIdChangeListener(this);

			veranstaltungsStufenContainer = new SQLContainer(q2);

			veranstaltungsTeilnehmer = new SQLContainer(q3);

		} catch (SQLException e) {
			e.printStackTrace();
		}

		// common part: create layout
		mainLayout = new VerticalLayout();

		mainLayout.setMargin(true);

		Component secondPanel = createSecondPanel();
		mainLayout.addComponent(secondPanel);
		mainLayout.setExpandRatio(secondPanel, 1);

		Component thirdPanel = createThirdPanel();
		mainLayout.addComponent(thirdPanel);
		mainLayout.setExpandRatio(thirdPanel, 2);

		// setCompositionRoot(mainLayout);

	}

	private Panel createSecondPanel() {

		Panel secondLine = new Panel();

		secondLineLayout = new GridLayout(5, 4);
		secondLineLayout.setWidth("100%");
		secondLineLayout.setHeight("100%");

		nameVeranstaltung = new TextField("Veranstaltungsname");
		nameVeranstaltung.setImmediate(true);
		nameVeranstaltung.setMaxLength(45);
		nameVeranstaltung.setNullRepresentation("neue Veranstaltung");
		nameVeranstaltung.setPropertyDataSource(currentVeranstaltungsItem.getItemProperty("name"));

		secondLineLayout.addComponent(nameVeranstaltung, 0, 0);

		datumVeranstaltung = new PopupDateField("Datum der Veranstaltung");
		datumVeranstaltung.setImmediate(true);
		datumVeranstaltung.setPropertyDataSource(currentVeranstaltungsItem.getItemProperty("datum"));

		datumVeranstaltung.addValueChangeListener(new ValueChangeListener() {

			@Override
			public void valueChange(ValueChangeEvent event) {
				// TODO Auto-generated method stub
				String title = VeranstaltungsTypen
						.getVeranstaltungsTypForId(
								Integer.valueOf(currentVeranstaltungsItem.getItemProperty("typ").getValue().toString()))
						.getVeranstaltungsTypBezeichnung();

				title += " " + new SimpleDateFormat("dd.MM.yyyy")
						.format(currentVeranstaltungsItem.getItemProperty("datum").getValue());

				setTitle(title);

			}

		});

		secondLineLayout.addComponent(datumVeranstaltung, 1, 0);

		nameRichter = new TextField("Name Richter");
		nameRichter.setImmediate(true);
		nameRichter.setMaxLength(45);
		nameRichter.setNullRepresentation("neuer Richter");
		nameRichter.setPropertyDataSource(currentVeranstaltungsItem.getItemProperty("richter"));
		secondLineLayout.addComponent(nameRichter, 2, 0);

		veranstalter = new TextField("Veranstalter");
		veranstalter.setImmediate(true);
		veranstalter.setMaxLength(45);
		veranstalter.setNullRepresentation("Veranstalter");
		veranstalter.setPropertyDataSource(currentVeranstaltungsItem.getItemProperty("veranstalter"));
		secondLineLayout.addComponent(veranstalter, 3, 0);

		veranstaltungsOrt = new TextField("Veranstaltungsort");
		veranstaltungsOrt.setImmediate(true);
		veranstaltungsOrt.setMaxLength(45);
		veranstaltungsOrt.setNullRepresentation("neuer Veranstaltungsort");
		veranstaltungsOrt.setPropertyDataSource(currentVeranstaltungsItem.getItemProperty("veranstaltungsort"));
		secondLineLayout.addComponent(veranstaltungsOrt, 4, 0);

		nameVeranstaltungsLeiter = new TextField("Veranstaltungs-/Prüfungsleiter");
		nameVeranstaltungsLeiter.setImmediate(true);
		nameVeranstaltungsLeiter.setMaxLength(45);
		nameVeranstaltungsLeiter.setNullRepresentation("neuer Veranstaltungsleiter");
		nameVeranstaltungsLeiter
				.setPropertyDataSource(currentVeranstaltungsItem.getItemProperty("veranstaltungsleiter"));
		secondLineLayout.addComponent(nameVeranstaltungsLeiter, 0, 1);

		strasseLeiter = new TextField("Strasse Prüfungsleiter");
		strasseLeiter.setImmediate(true);
		strasseLeiter.setMaxLength(45);
		strasseLeiter.setNullRepresentation("strasse Leiter");
		strasseLeiter.setPropertyDataSource(currentVeranstaltungsItem.getItemProperty("strasse_leiter"));
		secondLineLayout.addComponent(strasseLeiter, 1, 1);

		plzLeiter = new TextField("PLZ Prüfungsleiter");
		plzLeiter.setImmediate(true);
		plzLeiter.setMaxLength(45);
		plzLeiter.setNullRepresentation("plz Leiter");
		plzLeiter.setPropertyDataSource(currentVeranstaltungsItem.getItemProperty("plz_leiter"));
		secondLineLayout.addComponent(plzLeiter, 2, 1);

		ortLeiter = new TextField("Ort Prüfungsleiter");
		ortLeiter.setImmediate(true);
		ortLeiter.setMaxLength(45);
		ortLeiter.setNullRepresentation("ort Leiter");
		ortLeiter.setPropertyDataSource(currentVeranstaltungsItem.getItemProperty("ort_leiter"));
		secondLineLayout.addComponent(ortLeiter, 3, 1);

		telnrLeiter = new TextField("Telefon Prüfungsleiter");
		telnrLeiter.setImmediate(true);
		telnrLeiter.setMaxLength(45);
		telnrLeiter.setNullRepresentation("telnr Leiter");
		telnrLeiter.setPropertyDataSource(currentVeranstaltungsItem.getItemProperty("tel_nr_leiter"));
		secondLineLayout.addComponent(telnrLeiter, 4, 1);
		secondLine.setContent(secondLineLayout);

		Button printBewertungsListeButton = new Button();
		printBewertungsListeButton.setCaption("Bewertungsliste ÖRC");
		printBewertungsListeButton.addStyleName(ValoTheme.BUTTON_SMALL);
		printBewertungsListeButton.addClickListener(new ClickListener() {

			@Override
			public void buttonClick(ClickEvent event) {
				if (!(currentPrintComponent == null)) {
					secondLineLayout.removeComponent(currentPrintComponent);
				}

				BewertungsListeNeu bewertungsListe = new BewertungsListeNeu(currentVeranstaltungsItem);
				secondLineLayout.addComponent(bewertungsListe);
				currentPrintComponent = bewertungsListe;
			}

		});
		secondLineLayout.addComponent(printBewertungsListeButton, 0, 2);

		if (defTyp.equals(VeranstaltungsTypen.WESENSTEST)) {

			Upload upload = new Upload("starte Datenupload hier", receiver);
			upload.setButtonCaption("Start Upload");
			upload.addSucceededListener(receiver);
			upload.addFailedListener(receiver);
			upload.setId("upload");
			secondLineLayout.addComponent(upload, 1, 2, 3, 2);
			;
		}

		if (defTyp.equals(VeranstaltungsTypen.RBP_2017_WASSER) || defTyp.equals(VeranstaltungsTypen.GAP_PRÜFUNG)) {

			this.hundeDokumenteImporter.setGehoertZu(
					new Integer(currentVeranstaltungsItem.getItemProperty("id_veranstaltung").getValue().toString()));
			this.hundeDokumenteImporter.setGehoertZuType(DokumentGehoertZuType.VERANSTALTUNG);
			Upload upload = new Upload("starte Urkundenupload hier", this.hundeDokumenteImporter);
			upload.setButtonCaption("Urkunde");
			upload.addSucceededListener(this.hundeDokumenteImporter);
			upload.addFailedListener(this.hundeDokumenteImporter);
			upload.setId("upload");
			secondLineLayout.addComponent(upload, 1, 2, 3, 2);
			;
		}

		if (defTyp.equals(VeranstaltungsTypen.WESENSTEST)) {

			Button showUebertrag = new Button("übertrage Daten in show");
			showUebertrag.addClickListener(event -> uebertrageToShow());
			secondLineLayout.addComponent(showUebertrag, 4, 2, 4, 2);
			;
		}

		Button printStarterListe = new Button();
		printStarterListe.setCaption("Starterliste Extern");
		printStarterListe.addStyleName(ValoTheme.BUTTON_SMALL);
		printStarterListe.addClickListener(new ClickListener() {

			@Override
			public void buttonClick(ClickEvent event) {
				if (!(currentPrintComponent == null)) {
					secondLineLayout.removeComponent(currentPrintComponent);
				}

				StarterListe starterListe = new StarterListe(currentVeranstaltungsItem, false);
				secondLineLayout.addComponent(starterListe);
				currentPrintComponent = starterListe;
			}

		});
		secondLineLayout.addComponent(printStarterListe, 0, 3);

		Button printStarterListeIntern = new Button();
		printStarterListeIntern.setCaption("Starterliste Intern");
		printStarterListeIntern.addStyleName(ValoTheme.BUTTON_SMALL);
		printStarterListeIntern.addClickListener(new ClickListener() {

			@Override
			public void buttonClick(ClickEvent event) {
				if (!(currentPrintComponent == null)) {
					secondLineLayout.removeComponent(currentPrintComponent);
				}

				StarterListe starterListe = new StarterListe(currentVeranstaltungsItem, true);
				secondLineLayout.addComponent(starterListe);
				currentPrintComponent = starterListe;
			}

		});

		secondLineLayout.addComponent(printStarterListeIntern, 1, 3);

		if (defTyp.equals(VeranstaltungsTypen.JUNGHUNDEPRUEFUNG)) {

			Button jungHundePruefungKurz = new Button();
			jungHundePruefungKurz.setCaption("Urkunde kurz");
			jungHundePruefungKurz.addStyleName(ValoTheme.BUTTON_SMALL);
			jungHundePruefungKurz.addClickListener(new ClickListener() {

				@Override
				public void buttonClick(ClickEvent event) {
					if (!(currentPrintComponent == null)) {
						secondLineLayout.removeComponent(currentPrintComponent);
					}

					JungHundePruefung2017 urkunde = new JungHundePruefung2017(currentVeranstaltungsItem, true);
					secondLineLayout.addComponent(urkunde);
					currentPrintComponent = urkunde;
				}

			});
			secondLineLayout.addComponent(jungHundePruefungKurz, 2, 3);

			Button jungHundePruefungLang = new Button();
			jungHundePruefungLang.setCaption("Urkunde lang");
			jungHundePruefungLang.addStyleName(ValoTheme.BUTTON_SMALL);
			jungHundePruefungLang.addClickListener(new ClickListener() {

				@Override
				public void buttonClick(ClickEvent event) {
					if (!(currentPrintComponent == null)) {
						secondLineLayout.removeComponent(currentPrintComponent);
					}

					JungHundePruefung2017 urkunde = new JungHundePruefung2017(currentVeranstaltungsItem, false);
					secondLineLayout.addComponent(urkunde);
					currentPrintComponent = urkunde;
				}

			});

			secondLineLayout.addComponent(jungHundePruefungLang, 3, 3);

		}

		return secondLine;
	}

	public void setTitle(String title) {

		listener.titleChanged(title, VeranstaltungsDetailViewNeu.this);
	}

	private Component createThirdPanel() {
		stufenSheet = new TabSheet();

		veranstaltungsStufenContainer.addContainerFilter(new Equal("id_veranstaltung",
				currentVeranstaltungsItem.getItemProperty("id_veranstaltung").getValue()));

		for (Object zw : veranstaltungsStufenContainer.getItemIds()) {

			AnmeldungsPanel myAnmeldungsPanel = new AnmeldungsPanel(
					VeranstaltungsStufen.getBezeichnungForId(new Integer(veranstaltungsStufenContainer.getItem(zw)
							.getItemProperty("stufen_typ").getValue().toString())),
					currentVeranstaltungsItem, veranstaltungsStufenContainer.getItem(zw));

			stufenSheet
					.addTab(myAnmeldungsPanel,
							VeranstaltungsStufen.getBezeichnungForId(new Integer(veranstaltungsStufenContainer
									.getItem(zw).getItemProperty("stufen_typ").getValue().toString()))
									.getBezeichnung());
			stufenSheet.addSelectedTabChangeListener(new SelectedTabChangeListener() {

				@Override
				public void selectedTabChange(SelectedTabChangeEvent event) {
					// TODO Auto-generated method stub
					TabSheet ts = (TabSheet) event.getSource();
					Iterator i = ts.iterator();
					while (i.hasNext()) {
						Object o = i.next();
						if (o instanceof AnmeldungsPanel) {
							AnmeldungsPanel anmeldungsPanel = (AnmeldungsPanel) o;
							anmeldungsPanel.removePrintComponent();

						}
					}

				}
			});

		}
		receiver.setComponentForMeldung(stufenSheet.getTab(0).getComponent());

		veranstaltungsStufenContainer.removeAllContainerFilters();

		return stufenSheet;
	}

	public void commit() {
		try {
			veranstaltungsContainer.commit();
			veranstaltungsStufenContainer.commit();

			veranstaltungsContainer.refresh();
			veranstaltungsStufenContainer.refresh();

			if (veranstaltungsId != null) {
				veranstaltungsContainer
						.addContainerFilter(new Equal("id_veranstaltung", veranstaltungsId.getId()[0].toString()));
				currentVeranstaltungsItem = veranstaltungsContainer.getItem(veranstaltungsContainer.getIdByIndex(0));
				veranstaltungsContainer.removeAllContainerFilters();
			}

			veranstaltungsTeilnehmer.commit();

		} catch (SQLException ee) {
			ee.printStackTrace();
		}
	}

	@Override
	public void rowIdChange(RowIdChangeEvent event) {
		veranstaltungsId = event.getNewRowId();

	}

	public class AnmeldungsPanel extends CustomComponent {
		Item veranstaltung;
		Item veranstaltungsStufe;
		VeranstaltungsStufen defStufe;

		Component anmeldungsGrid;
		VerticalLayout anmeldungsPanelLayout;
		VerticalLayout tableLayout;
		HorizontalLayout buttonLeiste;
		Component currentPrintComponent = null;

		public AnmeldungsPanel(VeranstaltungsStufen defStufeUeber, Item veranstaltungUeber,
				Item veranstaltungsStufeUeber) {
			// super();
			this.veranstaltung = veranstaltungUeber;
			this.veranstaltungsStufe = veranstaltungsStufeUeber;
			this.defStufe = defStufeUeber;

			anmeldungsPanelLayout = new VerticalLayout();
			anmeldungsPanelLayout.setSizeFull();

			buttonLeiste = new HorizontalLayout();
			tableLayout = new VerticalLayout();

			Button neuerTeilnehmer = new Button();
			neuerTeilnehmer.setCaption("neuer Teilnehmer");
			neuerTeilnehmer.addStyleName(ValoTheme.BUTTON_SMALL);

			neuerTeilnehmer.addClickListener(new ClickListener() {

				@Override
				public void buttonClick(ClickEvent event) {
					DashBoardEventBus.register(anmeldungsGrid);
					SearchWindow.open();

				}

			});

			buttonLeiste.addComponent(neuerTeilnehmer);

			Button printRichterBlattButton = new Button();
			printRichterBlattButton.setCaption("Richterblatt");
			printRichterBlattButton.addStyleName(ValoTheme.BUTTON_SMALL);

			printRichterBlattButton.addClickListener(new ClickListener() {

				@Override
				public void buttonClick(ClickEvent event) {
					if (!(currentPrintComponent == null)) {
						anmeldungsPanelLayout.removeComponent(currentPrintComponent);
					}

					Class<? extends CustomComponent> printClass = defStufe.getRichterBlatt();

					if (!(printClass == null)) {
						try {
							Component printObject = printClass.getConstructor(Item.class, Item.class)
									.newInstance(veranstaltung, veranstaltungsStufe);
							anmeldungsPanelLayout.addComponent(printObject);
							currentPrintComponent = printObject;
						} catch (Exception e) {
							e.printStackTrace();
							Notification.show("fehler beim laden der Druckklasse");
						}
					} else {
						Notification.show("kein Richterblatt hinterlegt");
					}

				}

			});

			buttonLeiste.addComponent(printRichterBlattButton);

			Button printUrkundenButton = new Button();
			printUrkundenButton.setCaption("Urkunden");
			printUrkundenButton.addStyleName(ValoTheme.BUTTON_SMALL);

			printUrkundenButton.addClickListener(new ClickListener() {

				@Override
				public void buttonClick(ClickEvent event) {
					if (!(currentPrintComponent == null)) {
						anmeldungsPanelLayout.removeComponent(currentPrintComponent);
					}

					if (defStufe.equals(VeranstaltungsStufen.TRAININGS_WT_ANFAENGER)
							|| defStufe.equals(VeranstaltungsStufen.TRAININGS_WT_FORTGESCHRITTEN)
							|| defStufe.equals(VeranstaltungsStufen.TRAININGS_WT_EINSTEIGER)
							|| defStufe.equals(VeranstaltungsStufen.TRAININGS_WT_LEICHT)
							|| defStufe.equals(VeranstaltungsStufen.TRAININGS_WT_MITTEL)) {
						UrkundeTrainingsWorkingtest urkunde = new UrkundeTrainingsWorkingtest(veranstaltung,
								veranstaltungsStufe);
						anmeldungsPanelLayout.addComponent(urkunde);
						currentPrintComponent = urkunde;

					} else if (defStufe.equals(VeranstaltungsStufen.WESENSTEST_GRUPPE_ALLGEMEIN)) {
						WesentestBewertungsblatt urkunde = new WesentestBewertungsblatt(veranstaltung,
								veranstaltungsStufe);
						anmeldungsPanelLayout.addComponent(urkunde);
						currentPrintComponent = urkunde;

					} else {
						Urkunde urkunde = new Urkunde(veranstaltung, veranstaltungsStufe);
						anmeldungsPanelLayout.addComponent(urkunde);
						currentPrintComponent = urkunde;

					}

				}

			});

			buttonLeiste.addComponent(printUrkundenButton);

			Button printMeldungButton = new Button();
			printMeldungButton.setCaption("Meldeblätter drucken");
			printMeldungButton.addStyleName(ValoTheme.BUTTON_SMALL);
			printMeldungButton.addClickListener(new ClickListener() {

				@Override
				public void buttonClick(ClickEvent event) {
					if (!(currentPrintComponent == null)) {
						anmeldungsPanelLayout.removeComponent(currentPrintComponent);
					}
					if (defStufe.equals(VeranstaltungsStufen.STUFE_BH)
							|| defStufe.equals(VeranstaltungsStufen.STUFE_BGH1)
							|| defStufe.equals(VeranstaltungsStufen.STUFE_BGH2)
							|| defStufe.equals(VeranstaltungsStufen.STUFE_BGH3)) {

						BHMeldeBlatt meldeBlatt = new BHMeldeBlatt(veranstaltung, veranstaltungsStufe);
						anmeldungsPanelLayout.addComponent(meldeBlatt);
						currentPrintComponent = meldeBlatt;
					} else if (defStufe.equals(VeranstaltungsStufen.STUFE_RBP1)
							|| defStufe.equals(VeranstaltungsStufen.STUFE_RBP2)
							|| defStufe.equals(VeranstaltungsStufen.STUFE_RBP3)
							|| defStufe.equals(VeranstaltungsStufen.STUFE_RBP4_M_WASSER)
							|| defStufe.equals(VeranstaltungsStufen.STUFE_RBP4_O_WASSER)) {

					} else if (defStufe.equals(VeranstaltungsStufen.STUFE_GAP1)
							|| defStufe.equals(VeranstaltungsStufen.STUFE_GAP2)
							|| defStufe.equals(VeranstaltungsStufen.STUFE_GAP3)) {

					} else if (defStufe.equals(VeranstaltungsStufen.WESENSTEST_GRUPPE_ALLGEMEIN)) {
						WesentestFormwert meldeBlatt = new WesentestFormwert(veranstaltung, veranstaltungsStufe);
						anmeldungsPanelLayout.addComponent(meldeBlatt);
						currentPrintComponent = meldeBlatt;

					}

				}

			});
			buttonLeiste.addComponent(printMeldungButton);

			anmeldungsGrid = new VeranstaltungsTeilnehmerGrid(defStufe, veranstaltungsStufe);

			anmeldungsPanelLayout.addComponent(buttonLeiste);
			tableLayout.addComponent(anmeldungsGrid);
			anmeldungsPanelLayout.addComponent(tableLayout);
			anmeldungsPanelLayout.setSpacing(false);

			setCompositionRoot(anmeldungsPanelLayout);
		}

		public void removePrintComponent() {
			if (!(this.currentPrintComponent == null)) {
				this.anmeldungsPanelLayout.removeComponent(this.currentPrintComponent);
			}
		}

		public Component getMeldeComponent() {
			return this.anmeldungsGrid;
		}

	}

	public void refresh() {
		this.mainLayout.removeAllComponents();
		this.buildMainLayout();
	}

	protected Integer getGesPunkteForRow(Table anmeldungsTable, int row) {

		Integer result = 0;
		for (int i = 1; i <= 7; i++) {
			Property zwProperty = anmeldungsTable.getContainerProperty(row, "uebung" + i);
			if (!(zwProperty == null)) {
				System.out.println("zwProperty" + zwProperty.getType());
				TextField zw = ((TextField) zwProperty.getValue());
				try {
					result = result + Integer.parseInt(zw.getValue());
				} catch (NumberFormatException ignored) {

				}
			}

		}

		return result;
	}

	public interface VeranstaltungsDetailListener {
		void titleChanged(String newTitle, VeranstaltungsDetailViewNeu detail);
	}

	private void uebertrageToShow() {

		DBShowNeu db = new DBShowNeu();

		TableQuery q3;

		SQLContainer teilnehmerContainer;

		try {

			q3 = new TableQuery("veranstaltungs_teilnehmer", DBConnection.INSTANCE.getConnectionPool());
			q3.setVersionColumn("version");

			teilnehmerContainer = new SQLContainer(q3);

			Show show = db.getShowForVeranstaltung(Integer
					.valueOf(currentVeranstaltungsItem.getItemProperty("id_veranstaltung").getValue().toString()));
			System.out.println("id: " + show.getIdSchau());
			show.setSchaubezeichnung(defTyp.getVeranstaltungsTypBezeichnung() + " "
					+ currentVeranstaltungsItem.getItemProperty("veranstaltungsort").getValue().toString());
			show.setSchauTyp(defTyp.getShowTyp());
			show.setSchauDate(new SimpleDateFormat("yyyy-MM-dd")
					.parse(currentVeranstaltungsItem.getItemProperty("datum").getValue().toString()));
			show.setSchauKuerzel("");

			db.updateShow(show);

			ShowRing ring = db.getShowRing(show.getIdSchau(), "1");

			teilnehmerContainer = new SQLContainer(q3);

			teilnehmerContainer.addContainerFilter(new Equal("id_veranstaltung",
					currentVeranstaltungsItem.getItemProperty("id_veranstaltung").getValue()));

			Integer i = 1;
			for (Object id : teilnehmerContainer.getItemIds()) {
				ShowHund hund = db.getShowHundForVeranstaltung(show.getIdSchau(), ring, Integer.valueOf(
						teilnehmerContainer.getItem(id).getItemProperty("id_teilnehmer").getValue().toString()));
				baueShowHund(hund, ring, teilnehmerContainer.getItem(id));
				hund.setKatalognumer(i.toString());
				hund.setSort_kat_nr(i);
				db.updateShowHund(hund);
				i++;

			}

		} catch (Exception e) {
			Notification.show("fehler beim Übertragen");
			e.printStackTrace();
		}

	}

	private void baueShowHund(ShowHund hund, ShowRing ring, Item teilnehmerItem) throws Exception {

		TableQuery q4;
		TableQuery q5;

		q4 = new TableQuery("person", DBConnection.INSTANCE.getConnectionPool());
		q4.setVersionColumn("version");

		q5 = new TableQuery("hund", DBConnection.INSTANCE.getConnectionPool());
		q5.setVersionColumn("version");

		SQLContainer personContainer;
		SQLContainer hundContainer;

		personContainer = new SQLContainer(q4);
		hundContainer = new SQLContainer(q5);

		hundContainer.addContainerFilter(new Equal("idhund", teilnehmerItem.getItemProperty("id_hund").getValue()));

		personContainer
				.addContainerFilter(new Equal("idperson", teilnehmerItem.getItemProperty("id_person").getValue()));

		hund.setChipnummer(
				hundContainer.getItem(hundContainer.firstItemId()).getItemProperty("chipnummer").getValue().toString());

		hund.setWurftag(new SimpleDateFormat("yyyy-MM-dd").parse(
				hundContainer.getItem(hundContainer.firstItemId()).getItemProperty("wurfdatum").getValue().toString()));

		hund.setZuchtbuchnummer(hundContainer.getItem(hundContainer.firstItemId()).getItemProperty("zuchtbuchnummer")
				.getValue().toString());

		hund.setGeschlecht(
				hundContainer.getItem(hundContainer.firstItemId()).getItemProperty("geschlecht").getValue().toString());

		hund.setRasse(Rassen.getRasseForKurzBezeichnung(
				hundContainer.getItem(hundContainer.firstItemId()).getItemProperty("rasse").getValue().toString()));

		hund.setShowHundName(hundContainer.getItem(hundContainer.firstItemId()).getItemProperty("zwingername")
				.getValue().toString());

		hund.setBesitzershow(
				personContainer.getItem(personContainer.firstItemId()).getItemProperty("nachname").getValue().toString()
						+ " " + personContainer.getItem(personContainer.firstItemId()).getItemProperty("vorname")
								.getValue().toString());
		hund.setRingId(ring.getRingId());
		hund.setVater("");
		hund.setMutter("");
		hundContainer.removeAllContainerFilters();
		personContainer.removeAllContainerFilters();

	}

}
