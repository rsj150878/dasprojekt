package com.app.Components;

import java.sql.SQLException;

import com.app.dbIO.DBConnection;
import com.app.interfaces.DetailInterface;
import com.app.printClasses.Kursblatt;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.util.HierarchicalContainer;
import com.vaadin.data.util.filter.Compare.Equal;
import com.vaadin.data.util.sqlcontainer.SQLContainer;
import com.vaadin.data.util.sqlcontainer.query.TableQuery;
import com.vaadin.event.Action;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.AbstractSelect.ItemCaptionMode;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalSplitPanel;
import com.vaadin.ui.Tree;

public class MitgliederListe extends CustomComponent implements Action.Handler,
		Tree.ValueChangeListener, DetailInterface {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private HorizontalSplitPanel horizontalSplitPanel_1;
	@AutoGenerated
	private Tree Mitglieder;
	private TableQuery q1;
	private TableQuery q2;

	private SQLContainer personContainer;
	private SQLContainer hundContainer;

	private static final Action ADDPerson = new Action("Neue Person");
	private static final Action ADDHund = new Action("Neuer Hund");
	private static final Action PRINTKursBlatt = new Action("Kursblatt drucken");
	private static final Action[] actions = new Action[] { ADDPerson, ADDHund,
			PRINTKursBlatt };

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public MitgliederListe() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here

		q1 = new TableQuery("person", DBConnection.INSTANCE.getConnectionPool());
		q1.setVersionColumn("version");

		q2 = new TableQuery("hund", DBConnection.INSTANCE.getConnectionPool());
		q2.setVersionColumn("version");

		try {
			personContainer = new SQLContainer(q1);
			personContainer.setAutoCommit(false);
			hundContainer = new SQLContainer(q2);
			hundContainer.setAutoCommit(false);

		} catch (SQLException e) {
			e.printStackTrace();
		}

		Mitglieder.setContainerDataSource(createTreeContent());
		Mitglieder.setItemCaptionMode(ItemCaptionMode.PROPERTY);
		Mitglieder.setItemCaptionPropertyId("Name");
		Mitglieder.setImmediate(true);
		Mitglieder.setSelectable(true);

		Mitglieder.addActionHandler(this);
		Mitglieder.addValueChangeListener(this);

	}

	public HierarchicalContainer createTreeContent() {

		HierarchicalContainer container = new HierarchicalContainer();

		// A property that holds the caption is needed for
		// ITEM_CAPTION_MODE_PROPERTY

		container.addContainerProperty("Name", String.class, "");
		container.addContainerProperty("KnotenArt", Integer.class, "");

		new Object() {

			public void put(SQLContainer data, Integer parentKnotenArt,
					Object parent, HierarchicalContainer container) {

				for (Object zw : data.getItemIds()) {

					if (parentKnotenArt.equals(1)) {

						// Support both ITEM_CAPTION_MODE_ID and
						// ITEM_CAPTION_MODE_PROPERTY

						container.addItem(hundContainer.getItem(zw));

						String hundeName = hundContainer.getItem(zw)
								.getItemProperty("zwingername").getValue()
								.toString();

						container.getItem(hundContainer.getItem(zw))
								.getItemProperty("Name").setValue(hundeName);

						container.getItem(hundContainer.getItem(zw))
								.getItemProperty("KnotenArt").setValue(1);

						container.setParent(hundContainer.getItem(zw), parent);
						container.setChildrenAllowed(hundContainer.getItem(zw),
								false);

					} else {

						if (parentKnotenArt.equals(0)) {

							// It's an Object[]
							// Object[] sub = (Object[]) data[i];
							// String name = (String) sub[0];
							// Support both ITEM_CAPTION_MODE_ID and
							// ITEM_CAPTION_MODE_PROPERTY
							hundContainer.addContainerFilter(new Equal(
									"idperson", personContainer.getItem(zw)
											.getItemProperty("idperson")
											.getValue()));

							String name = personContainer.getItem(zw)
									.getItemProperty("nachname").getValue()
									.toString()
									+ new String(" ")
									+ personContainer.getItem(zw)
											.getItemProperty("vorname")
											.getValue().toString();

							System.out.println("besitzername in baumaufbau"
									+ name);

							container.addItem(personContainer.getItem(zw));
							container.getItem(personContainer.getItem(zw))
									.getItemProperty("Name").setValue(name);

							container.getItem(personContainer.getItem(zw))
									.getItemProperty("KnotenArt").setValue(0);

							put(hundContainer, 1, personContainer.getItem(zw),
									container);
							container.setParent(personContainer.getItem(zw),
									parent);
							hundContainer.removeAllContainerFilters();
						}
					}

				}

			}

		}.put(personContainer, 0, null, container);

		return container;

	}

	public Action[] getActions(Object target, Object sender) {
		// We can provide different actions for each target (item), but we'll
		// use the same actions all the time.
		return actions;
	}

	public void handleAction(Action action, Object sender, Object target) {

		Item parent;
		HierarchicalContainer container = ((HierarchicalContainer) Mitglieder
				.getContainerDataSource());

		if (action == ADDPerson) {
			Object neuePerson = personContainer.addItem();
			personContainer.getItemUnfiltered(neuePerson)
					.getItemProperty("nachname").setValue("neue Person");

			container.addItem(personContainer.getItem(neuePerson));

			String name = personContainer.getItem(neuePerson)
					.getItemProperty("nachname").getValue().toString();

			container.getItem(personContainer.getItem(neuePerson))
					.getItemProperty("Name").setValue(name);
			container.getItem(personContainer.getItem(neuePerson))
					.getItemProperty("KnotenArt").setValue(0);
			container.setParent(personContainer.getItem(neuePerson), null);
			container.setChildrenAllowed(personContainer.getItem(neuePerson),
					true);

			Mitglieder.setValue(personContainer.getItem(neuePerson));

		} else if (action == ADDHund) {

			if (container.getItem(target).getItemProperty("KnotenArt")
					.getValue().equals(0)) {
				parent = (Item) target;

			} else {
				parent = (Item) container.getParent(target);
			}

			Object neuerHund = hundContainer.addItem();
			hundContainer.getItemUnfiltered(neuerHund)
					.getItemProperty("zwingername").setValue("neuer hund");

			hundContainer.getItemUnfiltered(neuerHund)
					.getItemProperty("idperson")
					.setValue(parent.getItemProperty("idperson").getValue());

			container.addItem(hundContainer.getItem(neuerHund));

			String hundeName = hundContainer.getItem(neuerHund)
					.getItemProperty("zwingername").getValue().toString();

			container.getItem(hundContainer.getItem(neuerHund))
					.getItemProperty("Name").setValue(hundeName);

			container.getItem(hundContainer.getItem(neuerHund))
					.getItemProperty("KnotenArt").setValue(1);

			container.setParent(hundContainer.getItem(neuerHund), parent);
			container.setChildrenAllowed(hundContainer.getItem(neuerHund),
					false);

			Mitglieder.expandItem(parent);
			Mitglieder.setValue(hundContainer.getItem(neuerHund));

			// Add
			// final Object id = addCaptionedItem("New Item", target);
			// tree.expandItem(target);
			// tree.setValue(id);
			// editor.focus();
		} else if (action == PRINTKursBlatt) {
			// Kursblatt nur mal f�r Hund m�glihc
			if (container.getItem(target).getItemProperty("KnotenArt")
					.getValue().equals(1)) {

				Kursblatt x = new Kursblatt((Item) container.getParent(target),
						(Item) target);
				this.horizontalSplitPanel_1.setSecondComponent(x);

			}

		}
	}

	@Override
	public void valueChange(ValueChangeEvent event) {
		// TODO Auto-generated method stub

		HierarchicalContainer container = ((HierarchicalContainer) Mitglieder
				.getContainerDataSource());

		if (container.getItem(Mitglieder.getValue())
				.getItemProperty("KnotenArt").getValue().equals(new Integer(0))) {

			UserDetail userDetail = new UserDetail((Item) Mitglieder.getValue());
			this.horizontalSplitPanel_1.setSecondComponent(userDetail);

		} else if (container.getItem(Mitglieder.getValue())
				.getItemProperty("KnotenArt").getValue().equals(new Integer(1))) {

			HundDetail hundDetail = new HundDetail(
					(Item) Mitglieder.getValue(),
					(Item) container.getParent(Mitglieder.getValue()));
			this.horizontalSplitPanel_1.setSecondComponent(hundDetail);
		}

	}

	public void commit() {
		try {

			hundContainer.commit();
			personContainer.commit();

		} catch (SQLException e) {
			e.printStackTrace();

		}

	}

	public void rollback() {
		try {

			personContainer.rollback();
			hundContainer.rollback();
			horizontalSplitPanel_1.setSecondComponent(null);

		} catch (SQLException e) {

			e.printStackTrace();
		}
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		// horizontalSplitPanel_1
		horizontalSplitPanel_1 = buildHorizontalSplitPanel_1();
		mainLayout
				.addComponent(horizontalSplitPanel_1, "top:0.0px;left:0.0px;");

		return mainLayout;
	}

	@AutoGenerated
	private HorizontalSplitPanel buildHorizontalSplitPanel_1() {
		// common part: create layout
		horizontalSplitPanel_1 = new HorizontalSplitPanel();
		horizontalSplitPanel_1.setImmediate(false);
		horizontalSplitPanel_1.setWidth("1000px");
		horizontalSplitPanel_1.setHeight("605px");

		// Mitglieder
		Mitglieder = new Tree();
		Mitglieder.setImmediate(false);
		Mitglieder.setWidth("-1px");
		Mitglieder.setHeight("-1px");
		horizontalSplitPanel_1.addComponent(Mitglieder);

		return horizontalSplitPanel_1;
	}

}
