package com.app.DashBoard.View;

import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;

import org.tepi.filtertable.FilterTreeTable;

import com.app.Components.MitgliederFilterDecorator;
import com.app.Components.MitgliederFilterGenerator;
import com.app.bean.VeranstaltungsBean;
import com.app.bean.VeranstaltungsTypenBean;
import com.app.dbIO.DBConnection;
import com.app.enumPackage.VeranstaltungsStufen;
import com.app.enumPackage.VeranstaltungsTypen;
import com.app.printClasses.BGH1RichterBlatt;
import com.app.printClasses.BHMeldeBlatt;
import com.app.printClasses.BHRichterBlatt;
import com.app.printClasses.BewertungsListeBGH;
import com.app.printClasses.GAP1RichterBlatt;
import com.app.printClasses.GAP2RichterBlatt;
import com.app.printClasses.GAP3RichterBlatt;
import com.app.printClasses.GAPBewertungsExcel;
import com.app.printClasses.RBP1RichterBlatt;
import com.app.printClasses.RBP2RichterBlatt;
import com.app.printClasses.RBP3RichterBlatt;
import com.app.printClasses.RBP4RichterBlatt;
import com.app.printClasses.RBPBewertungsExcel;
import com.app.printClasses.Urkunde;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.data.util.HierarchicalContainer;
import com.vaadin.data.util.filter.Compare.Equal;
import com.vaadin.data.util.sqlcontainer.RowId;
import com.vaadin.data.util.sqlcontainer.SQLContainer;
import com.vaadin.data.util.sqlcontainer.query.QueryDelegate;
import com.vaadin.data.util.sqlcontainer.query.QueryDelegate.RowIdChangeEvent;
import com.vaadin.data.util.sqlcontainer.query.TableQuery;
import com.vaadin.event.ItemClickEvent;
import com.vaadin.event.ItemClickEvent.ItemClickListener;
import com.vaadin.server.FontAwesome;
import com.vaadin.ui.AbstractSelect.ItemCaptionMode;
import com.vaadin.ui.Accordion;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.HorizontalSplitPanel;
import com.vaadin.ui.Label;
import com.vaadin.ui.Panel;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.TabSheet.SelectedTabChangeEvent;
import com.vaadin.ui.TabSheet.SelectedTabChangeListener;
import com.vaadin.ui.Table;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.themes.ValoTheme;

public class VeranstaltungsDetailView extends CustomComponent implements
		QueryDelegate.RowIdChangeListener {

	private ComboBox veranstaltungsAuswahl;
	private Button neueVeranstaltung;
	private Button saveVeranstaltung;
	private ComboBox veranstaltungsTypFuerNeu;
	private TextField nameVeranstaltung;
	private TextField nameRichter;
	private TextField nameVeranstaltungsLeiter;
	private TextField veranstalter;
	private TextField veranstaltungsOrt;
	private PopupDateField datumVeranstaltung;

	private TextField telnrLeiter;
	private TextField plzLeiter;
	private TextField strasseLeiter;
	private TextField ortLeiter;

	private FilterTreeTable mitglieder;

	// private Item currentVeranstaltung;

	private BeanItemContainer<VeranstaltungsTypenBean> typenContainer = new BeanItemContainer<VeranstaltungsTypenBean>(
			VeranstaltungsTypenBean.class);

	private BeanItemContainer<VeranstaltungsBean> veranstaltungsComboContainer;

	private SQLContainer veranstaltungsContainer;
	private SQLContainer veranstaltungsStufenContainer;
	private SQLContainer personContainer;
	private SQLContainer hundContainer;
	private SQLContainer veranstaltungsTeilnehmer;

	private Item currentVeranstaltungsItem;

	private Accordion mainAccordion;

	private TableQuery q1;
	private TableQuery q2;
	private TableQuery q3;
	private TableQuery q4;
	private TableQuery q5;

	private RowId veranstaltungsId;

	private final VeranstaltungsDetailListener listener;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout mainLayout;

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public VeranstaltungsDetailView(Item currentVeranstaltungsItem,
			VeranstaltungsDetailListener listener) {

		// TODO add user code here

		this.currentVeranstaltungsItem = currentVeranstaltungsItem;
		this.listener = listener;
		buildMainLayout();
		setCompositionRoot(mainLayout);

	}

	private VerticalLayout buildMainLayout() {

		q1 = new TableQuery("veranstaltung",
				DBConnection.INSTANCE.getConnectionPool());
		q1.setVersionColumn("version");

		q2 = new TableQuery("veranstaltungs_stufe",
				DBConnection.INSTANCE.getConnectionPool());
		q2.setVersionColumn("version");

		q3 = new TableQuery("veranstaltungs_teilnehmer",
				DBConnection.INSTANCE.getConnectionPool());
		q3.setVersionColumn("version");

		q4 = new TableQuery("person", DBConnection.INSTANCE.getConnectionPool());
		q4.setVersionColumn("version");

		q5 = new TableQuery("hund", DBConnection.INSTANCE.getConnectionPool());
		q5.setVersionColumn("version");

		try {
			veranstaltungsContainer = new SQLContainer(q1);
			veranstaltungsContainer.addRowIdChangeListener(this);

			veranstaltungsStufenContainer = new SQLContainer(q2);

			personContainer = new SQLContainer(q4);
			hundContainer = new SQLContainer(q5);

			veranstaltungsTeilnehmer = new SQLContainer(q3);

		} catch (SQLException e) {
			e.printStackTrace();
		}

		// common part: create layout
		mainLayout = new VerticalLayout();

		mainLayout.setMargin(true);
		mainLayout.setSizeFull();

		// top-level component properties
		setSizeFull();

		Component secondPanel = createSecondPanel();
		mainLayout.addComponent(secondPanel);
		mainLayout.setExpandRatio(secondPanel, 1);

		Component thirdPanel = createThirdPanel();
		mainLayout.addComponent(thirdPanel);
		mainLayout.setExpandRatio(thirdPanel, 2);

		setCompositionRoot(mainLayout);

		return mainLayout;
	}

	private Panel createSecondPanel() {
		Panel secondLine = new Panel();

		GridLayout secondLineLayout = new GridLayout(5, 2);
		secondLineLayout.setWidth("100%");
		secondLineLayout.setHeight("100%");

		nameVeranstaltung = new TextField("Veranstaltungsname");
		nameVeranstaltung.setImmediate(true);
		nameVeranstaltung.setMaxLength(45);
		nameVeranstaltung.setNullRepresentation("neue Veranstaltung");
		nameVeranstaltung.setPropertyDataSource(currentVeranstaltungsItem
				.getItemProperty("name"));

		secondLineLayout.addComponent(nameVeranstaltung, 0, 0);

		datumVeranstaltung = new PopupDateField("Datum der Veranstaltung");
		datumVeranstaltung.setImmediate(true);
		datumVeranstaltung.setPropertyDataSource(currentVeranstaltungsItem
				.getItemProperty("datum"));
		
		datumVeranstaltung.addValueChangeListener(new ValueChangeListener() {

			@Override
			public void valueChange(ValueChangeEvent event) {
				// TODO Auto-generated method stub
				String title = VeranstaltungsTypen.getVeranstaltungsTypForId(
						Integer.valueOf(currentVeranstaltungsItem
								.getItemProperty("typ").getValue().toString()))
						.getVeranstaltungsTypBezeichnung();

				title += " " + new SimpleDateFormat("dd.MM.yyyy")
						.format(currentVeranstaltungsItem.getItemProperty(
								"datum").getValue());
			
				
				setTitle(title);
			
			}

			

		});

		secondLineLayout.addComponent(datumVeranstaltung, 1, 0);

		nameRichter = new TextField("Name Richter");
		nameRichter.setImmediate(true);
		nameRichter.setMaxLength(45);
		nameRichter.setNullRepresentation("neuer Richter");
		nameRichter.setPropertyDataSource(currentVeranstaltungsItem
				.getItemProperty("richter"));
		secondLineLayout.addComponent(nameRichter, 2, 0);

		veranstalter = new TextField("Veranstalter");
		veranstalter.setImmediate(true);
		veranstalter.setMaxLength(45);
		veranstalter.setNullRepresentation("Veranstalter");
		veranstalter.setPropertyDataSource(currentVeranstaltungsItem
				.getItemProperty("veranstalter"));
		secondLineLayout.addComponent(veranstalter, 3, 0);

		veranstaltungsOrt = new TextField("Veranstaltungsort");
		veranstaltungsOrt.setImmediate(true);
		veranstaltungsOrt.setMaxLength(45);
		veranstaltungsOrt.setNullRepresentation("neuer Veranstaltungsort");
		veranstaltungsOrt.setPropertyDataSource(currentVeranstaltungsItem
				.getItemProperty("veranstaltungsort"));
		secondLineLayout.addComponent(veranstaltungsOrt, 4, 0);

		nameVeranstaltungsLeiter = new TextField(
				"Veranstaltungs-/Prüfungsleiter");
		nameVeranstaltungsLeiter.setImmediate(true);
		nameVeranstaltungsLeiter.setMaxLength(45);
		nameVeranstaltungsLeiter
				.setNullRepresentation("neuer Veranstaltungsleiter");
		nameVeranstaltungsLeiter
				.setPropertyDataSource(currentVeranstaltungsItem
						.getItemProperty("veranstaltungsleiter"));
		secondLineLayout.addComponent(nameVeranstaltungsLeiter, 0, 1);

		strasseLeiter = new TextField("Strasse Prüfungsleiter");
		strasseLeiter.setImmediate(true);
		strasseLeiter.setMaxLength(45);
		strasseLeiter.setNullRepresentation("strasse Leiter");
		strasseLeiter.setPropertyDataSource(currentVeranstaltungsItem
				.getItemProperty("strasse_leiter"));
		secondLineLayout.addComponent(strasseLeiter, 1, 1);

		plzLeiter = new TextField("PLZ Prüfungsleiter");
		plzLeiter.setImmediate(true);
		plzLeiter.setMaxLength(45);
		plzLeiter.setNullRepresentation("plz Leiter");
		plzLeiter.setPropertyDataSource(currentVeranstaltungsItem
				.getItemProperty("plz_leiter"));
		secondLineLayout.addComponent(plzLeiter, 2, 1);

		ortLeiter = new TextField("Ort Prüfungsleiter");
		ortLeiter.setImmediate(true);
		ortLeiter.setMaxLength(45);
		ortLeiter.setNullRepresentation("ort Leiter");
		ortLeiter.setPropertyDataSource(currentVeranstaltungsItem
				.getItemProperty("ort_leiter"));
		secondLineLayout.addComponent(ortLeiter, 3, 1);

		telnrLeiter = new TextField("Telefon Prüfungsleiter");
		telnrLeiter.setImmediate(true);
		telnrLeiter.setMaxLength(45);
		telnrLeiter.setNullRepresentation("telnr Leiter");
		telnrLeiter.setPropertyDataSource(currentVeranstaltungsItem
				.getItemProperty("tel_nr_leiter"));
		secondLineLayout.addComponent(telnrLeiter, 4, 1);
		secondLine.setContent(secondLineLayout);

		return secondLine;
	}

	
	public void setTitle(String title) {
		
		listener.titleChanged(title, VeranstaltungsDetailView.this);
	}
	
	private HorizontalSplitPanel createThirdPanel() {
		HorizontalSplitPanel horizontalSplitPanel_1;

		// common part: create layout
		horizontalSplitPanel_1 = new HorizontalSplitPanel();
		horizontalSplitPanel_1.setImmediate(true);
		horizontalSplitPanel_1.setSplitPosition(25.0f, Unit.PERCENTAGE);
		horizontalSplitPanel_1.setLocked(true);

		// Mitglieder
		mitglieder = new FilterTreeTable();
		mitglieder.setImmediate(true);

		horizontalSplitPanel_1.addComponent(mitglieder);
		mitglieder.setContainerDataSource(createTreeContent());
		mitglieder.setVisibleColumns("Name");
		mitglieder.setFilterGenerator(new MitgliederFilterGenerator());
		mitglieder.setFilterDecorator(new MitgliederFilterDecorator());
		mitglieder.setSelectable(true);
		mitglieder.setFilterBarVisible(true);
		mitglieder.setNullSelectionAllowed(false);

		final TabSheet stufenSheet = new TabSheet();

		mitglieder.addItemClickListener(new ItemClickListener() {

			@Override
			public void itemClick(ItemClickEvent event) {
				if (event.isDoubleClick()) {
					// The item was double-clicked, event.getItem() returns the
					// target.
					HierarchicalContainer container = ((HierarchicalContainer) mitglieder
							.getContainerDataSource());
					System.out.println("event " + event.getItem());

					if (event.getItem().getItemProperty("KnotenArt").getValue()
							.equals(new Integer(1))) {

						AnmeldungsPanel selectedPanel = (AnmeldungsPanel) stufenSheet
								.getSelectedTab();

						selectedPanel.addAnmeldung((Item) container
								.getParent(mitglieder.getValue()),
								(Item) mitglieder.getValue());
					}

				}

			}

		});

		veranstaltungsStufenContainer.addContainerFilter(new Equal(
				"id_veranstaltung", currentVeranstaltungsItem.getItemProperty(
						"id_veranstaltung").getValue()));

		for (Object zw : veranstaltungsStufenContainer.getItemIds()) {

			AnmeldungsPanel myAnmeldungsPanel = new AnmeldungsPanel(
					VeranstaltungsStufen.getBezeichnungForId(new Integer(
							veranstaltungsStufenContainer.getItem(zw)
									.getItemProperty("stufen_typ").getValue()
									.toString())), currentVeranstaltungsItem,
					veranstaltungsStufenContainer.getItem(zw));

			stufenSheet.addTab(
					myAnmeldungsPanel,
					VeranstaltungsStufen.getBezeichnungForId(
							new Integer(veranstaltungsStufenContainer
									.getItem(zw).getItemProperty("stufen_typ")
									.getValue().toString())).getBezeichnung());
			stufenSheet
					.addSelectedTabChangeListener(new SelectedTabChangeListener() {

						@Override
						public void selectedTabChange(
								SelectedTabChangeEvent event) {
							// TODO Auto-generated method stub
							TabSheet ts = (TabSheet) event.getSource();
							Iterator i = ts.iterator();
							while (i.hasNext()) {
								Object o = i.next();
								if (o instanceof AnmeldungsPanel) {
									AnmeldungsPanel anmeldungsPanel = (AnmeldungsPanel) o;
									anmeldungsPanel.removePrintComponent();

								}
							}

						}
					});

		}

		veranstaltungsStufenContainer.removeAllContainerFilters();
		horizontalSplitPanel_1.setSecondComponent(stufenSheet);

		return horizontalSplitPanel_1;
	}

	public HierarchicalContainer createTreeContent() {

		HierarchicalContainer container = new HierarchicalContainer();

		// A property that holds the caption is needed for
		// ITEM_CAPTION_MODE_PROPERTY

		container.addContainerProperty("Name", String.class, "");
		container.addContainerProperty("KnotenArt", Integer.class, "");
		container.addContainerProperty("FilterField", String.class, "");

		new Object() {

			public void put(SQLContainer data, Integer parentKnotenArt,
					Object parent, HierarchicalContainer container) {

				for (Object zw : data.getItemIds()) {

					if (parentKnotenArt.equals(1)) {

						// Support both ITEM_CAPTION_MODE_ID and
						// ITEM_CAPTION_MODE_PROPERTY

						container.addItem(hundContainer.getItem(zw));
						Item parentItem = (Item) parent;

						String hundeName;
						if (hundContainer.getItem(zw)
								.getItemProperty("zwingername").getValue() == null) {

							hundeName = "";
						} else {
							hundeName = hundContainer.getItem(zw)
									.getItemProperty("zwingername").getValue()
									.toString();

						}

						container.getItem(hundContainer.getItem(zw))
								.getItemProperty("Name").setValue(hundeName);

						hundeName = " - "
								+ container.getItem(parent)
										.getItemProperty("Name").getValue()
										.toString();

						container.getItem(hundContainer.getItem(zw))
								.getItemProperty("FilterField")
								.setValue(hundeName);
						container.getItem(hundContainer.getItem(zw))
								.getItemProperty("KnotenArt").setValue(1);

						container.setParent(hundContainer.getItem(zw), parent);
						container.setChildrenAllowed(hundContainer.getItem(zw),
								false);

					} else {

						if (parentKnotenArt.equals(0)) {

							// It's an Object[]
							// Object[] sub = (Object[]) data[i];
							// String name = (String) sub[0];
							// Support both ITEM_CAPTION_MODE_ID and
							// ITEM_CAPTION_MODE_PROPERTY
							hundContainer.addContainerFilter(new Equal(
									"idperson", personContainer.getItem(zw)
											.getItemProperty("idperson")
											.getValue()));

							String name = personContainer.getItem(zw)
									.getItemProperty("nachname").getValue()
									.toString()
									+ new String(" ")
									+ personContainer.getItem(zw)
											.getItemProperty("vorname")
											.getValue().toString();

							container.addItem(personContainer.getItem(zw));

							container.getItem(personContainer.getItem(zw))
									.getItemProperty("FilterField")
									.setValue(name);

							container.getItem(personContainer.getItem(zw))
									.getItemProperty("Name").setValue(name);

							container.getItem(personContainer.getItem(zw))
									.getItemProperty("KnotenArt").setValue(0);

							put(hundContainer, 1, personContainer.getItem(zw),
									container);
							container.setParent(personContainer.getItem(zw),
									parent);
							hundContainer.removeAllContainerFilters();
						}
					}

				}

			}

		}.put(personContainer, 0, null, container);

		return container;

	}

	public void commit() {
		try {
			veranstaltungsContainer.commit();
			veranstaltungsStufenContainer.commit();

			veranstaltungsContainer.refresh();
			veranstaltungsStufenContainer.refresh();

			if (veranstaltungsId != null) {
				veranstaltungsContainer.addContainerFilter(new Equal(
						"id_veranstaltung", veranstaltungsId.getId()[0]
								.toString()));
				currentVeranstaltungsItem = veranstaltungsContainer
						.getItem(veranstaltungsContainer.getIdByIndex(0));
				veranstaltungsContainer.removeAllContainerFilters();
			}

			veranstaltungsTeilnehmer.commit();

		} catch (SQLException ee) {
			ee.printStackTrace();
		}
	}

	@Override
	public void rowIdChange(RowIdChangeEvent event) {
		veranstaltungsId = event.getNewRowId();

	}

	private class AnmeldungsPanel extends CustomComponent {
		Item veranstaltung;
		Item veranstaltungsStufe;
		VeranstaltungsStufen defStufe;
		CheckBox bezahltBox;
		CheckBox bestandenBox;

		Table anmeldungsTable;
		VerticalLayout anmeldungsPanelLayout;
		VerticalLayout tableLayout;
		HorizontalLayout buttonLeiste;
		Component currentPrintComponent = null;

		HashMap<Object, Item> itemMap = new HashMap<Object, Item>();
		HashMap<Object, Object> delMap = new HashMap<Object, Object>();

		public AnmeldungsPanel(VeranstaltungsStufen defStufeUeber,
				Item veranstaltungUeber, Item veranstaltungsStufeUeber) {
			// super();
			this.veranstaltung = veranstaltungUeber;
			this.veranstaltungsStufe = veranstaltungsStufeUeber;
			this.defStufe = defStufeUeber;

			anmeldungsPanelLayout = new VerticalLayout();
			anmeldungsPanelLayout.setSizeFull();

			buttonLeiste = new HorizontalLayout();
			tableLayout = new VerticalLayout();

			Button printBewertungsListeButton = new Button();
			printBewertungsListeButton.setCaption("Bewertungsliste");
			printBewertungsListeButton.addStyleName(ValoTheme.BUTTON_SMALL);
			printBewertungsListeButton.addClickListener(new ClickListener() {

				@Override
				public void buttonClick(ClickEvent event) {
					if (!(currentPrintComponent == null)) {
						anmeldungsPanelLayout
								.removeComponent(currentPrintComponent);
					}
					if (defStufe.equals(VeranstaltungsStufen.STUFE_BH)
							|| defStufe.equals(VeranstaltungsStufen.STUFE_BGH1)
							|| defStufe.equals(VeranstaltungsStufen.STUFE_BGH2)
							|| defStufe.equals(VeranstaltungsStufen.STUFE_BGH3)) {

						BewertungsListeBGH bewertungsListe = new BewertungsListeBGH(
								veranstaltung, veranstaltungsStufe);
						anmeldungsPanelLayout.addComponent(bewertungsListe);
						currentPrintComponent = bewertungsListe;
					} else if (defStufe.equals(VeranstaltungsStufen.STUFE_RBP1)
							|| defStufe.equals(VeranstaltungsStufen.STUFE_RBP2)
							|| defStufe.equals(VeranstaltungsStufen.STUFE_RBP3)
							|| defStufe
									.equals(VeranstaltungsStufen.STUFE_RBP4_M_WASSER)
							|| defStufe
									.equals(VeranstaltungsStufen.STUFE_RBP4_O_WASSER)) {

						RBPBewertungsExcel bewertungsListe = new RBPBewertungsExcel(
								veranstaltung, veranstaltungsStufe);
						anmeldungsPanelLayout.addComponent(bewertungsListe);
						currentPrintComponent = bewertungsListe;
					} else if (defStufe.equals(VeranstaltungsStufen.STUFE_GAP1)
							|| defStufe.equals(VeranstaltungsStufen.STUFE_GAP2)
							|| defStufe.equals(VeranstaltungsStufen.STUFE_GAP3)) {

						GAPBewertungsExcel bewertungsListe = new GAPBewertungsExcel(
								veranstaltung, veranstaltungsStufe);
						anmeldungsPanelLayout.addComponent(bewertungsListe);
						currentPrintComponent = bewertungsListe;
					}

				}

			});
			buttonLeiste.addComponent(printBewertungsListeButton);

			Button printRichterBlattButton = new Button();
			printRichterBlattButton.setCaption("Richterblatt");
			printRichterBlattButton.addStyleName(ValoTheme.BUTTON_SMALL);

			printRichterBlattButton.addClickListener(new ClickListener() {

				@Override
				public void buttonClick(ClickEvent event) {
					if (!(currentPrintComponent == null)) {
						anmeldungsPanelLayout
								.removeComponent(currentPrintComponent);
					}

					if (defStufe.equals(VeranstaltungsStufen.STUFE_BH)) {
						BHRichterBlatt bhBlatt = new BHRichterBlatt(
								veranstaltung, veranstaltungsStufe);
						anmeldungsPanelLayout.addComponent(bhBlatt);
						currentPrintComponent = bhBlatt;

					} else if (defStufe.equals(VeranstaltungsStufen.STUFE_BGH1)) {
						BGH1RichterBlatt bgh1Blatt = new BGH1RichterBlatt(
								veranstaltung, veranstaltungsStufe);
						anmeldungsPanelLayout.addComponent(bgh1Blatt);
						currentPrintComponent = bgh1Blatt;

					} else if (defStufe.equals(VeranstaltungsStufen.STUFE_RBP1)) {
						RBP1RichterBlatt rbp1Blatt = new RBP1RichterBlatt(
								veranstaltung, veranstaltungsStufe);
						anmeldungsPanelLayout.addComponent(rbp1Blatt);
						currentPrintComponent = rbp1Blatt;

					} else if (defStufe.equals(VeranstaltungsStufen.STUFE_RBP2)) {
						RBP2RichterBlatt rbp2Blatt = new RBP2RichterBlatt(
								veranstaltung, veranstaltungsStufe);
						anmeldungsPanelLayout.addComponent(rbp2Blatt);
						currentPrintComponent = rbp2Blatt;

					} else if (defStufe.equals(VeranstaltungsStufen.STUFE_RBP3)) {
						RBP3RichterBlatt rbp3Blatt = new RBP3RichterBlatt(
								veranstaltung, veranstaltungsStufe);
						anmeldungsPanelLayout.addComponent(rbp3Blatt);
						currentPrintComponent = rbp3Blatt;

					} else if (defStufe
							.equals(VeranstaltungsStufen.STUFE_RBP4_M_WASSER)
							|| defStufe
									.equals(VeranstaltungsStufen.STUFE_RBP4_O_WASSER)) {
						RBP4RichterBlatt rbp4Blatt = new RBP4RichterBlatt(
								veranstaltung, veranstaltungsStufe);
						anmeldungsPanelLayout.addComponent(rbp4Blatt);
						currentPrintComponent = rbp4Blatt;

					} else if (defStufe.equals(VeranstaltungsStufen.STUFE_GAP1)) {
						GAP1RichterBlatt gap1Blatt = new GAP1RichterBlatt(
								veranstaltung, veranstaltungsStufe);
						anmeldungsPanelLayout.addComponent(gap1Blatt);
						currentPrintComponent = gap1Blatt;

					} else if (defStufe.equals(VeranstaltungsStufen.STUFE_GAP2)) {
						GAP2RichterBlatt gap2Blatt = new GAP2RichterBlatt(
								veranstaltung, veranstaltungsStufe);
						anmeldungsPanelLayout.addComponent(gap2Blatt);
						currentPrintComponent = gap2Blatt;

					} else if (defStufe.equals(VeranstaltungsStufen.STUFE_GAP3)) {
						GAP3RichterBlatt gap3Blatt = new GAP3RichterBlatt(
								veranstaltung, veranstaltungsStufe);
						anmeldungsPanelLayout.addComponent(gap3Blatt);
						currentPrintComponent = gap3Blatt;

					}

				}

			});

			buttonLeiste.addComponent(printRichterBlattButton);

			Button printUrkundenButton = new Button();
			printUrkundenButton.setCaption("Urkunden");
			printUrkundenButton.addStyleName(ValoTheme.BUTTON_SMALL);
			printUrkundenButton.addClickListener(new ClickListener() {

				@Override
				public void buttonClick(ClickEvent event) {
					if (!(currentPrintComponent == null)) {
						anmeldungsPanelLayout
								.removeComponent(currentPrintComponent);
					}

					Urkunde urkunde = new Urkunde(veranstaltung,
							veranstaltungsStufe);
					anmeldungsPanelLayout.addComponent(urkunde);
					currentPrintComponent = urkunde;

				}

			});
			buttonLeiste.addComponent(printUrkundenButton);

			Button printMeldungButton = new Button();
			printMeldungButton.setCaption("Meldeblätter drucken");
			printMeldungButton.addStyleName(ValoTheme.BUTTON_SMALL);
			printMeldungButton.addClickListener(new ClickListener() {

				@Override
				public void buttonClick(ClickEvent event) {
					if (!(currentPrintComponent == null)) {
						anmeldungsPanelLayout
								.removeComponent(currentPrintComponent);
					}
					if (defStufe.equals(VeranstaltungsStufen.STUFE_BH)
							|| defStufe.equals(VeranstaltungsStufen.STUFE_BGH1)
							|| defStufe.equals(VeranstaltungsStufen.STUFE_BGH2)
							|| defStufe.equals(VeranstaltungsStufen.STUFE_BGH3)) {

						BHMeldeBlatt meldeBlatt = new BHMeldeBlatt(
								veranstaltung, veranstaltungsStufe);
						anmeldungsPanelLayout.addComponent(meldeBlatt);
						currentPrintComponent = meldeBlatt;
					} else if (defStufe.equals(VeranstaltungsStufen.STUFE_RBP1)
							|| defStufe.equals(VeranstaltungsStufen.STUFE_RBP2)
							|| defStufe.equals(VeranstaltungsStufen.STUFE_RBP3)
							|| defStufe
									.equals(VeranstaltungsStufen.STUFE_RBP4_M_WASSER)
							|| defStufe
									.equals(VeranstaltungsStufen.STUFE_RBP4_O_WASSER)) {

					} else if (defStufe.equals(VeranstaltungsStufen.STUFE_GAP1)
							|| defStufe.equals(VeranstaltungsStufen.STUFE_GAP2)
							|| defStufe.equals(VeranstaltungsStufen.STUFE_GAP3)) {

					}

				}

			});
			buttonLeiste.addComponent(printMeldungButton);

			anmeldungsTable = new Table();
			anmeldungsTable.setHeightUndefined();
			anmeldungsTable.addContainerProperty("besitzer", String.class, "",
					"Hundeführer", null, null);
			anmeldungsTable.addContainerProperty("hund", String.class, "",
					"Hund", null, null);
			anmeldungsTable.addContainerProperty("bezahlt", CheckBox.class,
					null, "bezahlt?", null, null);
			anmeldungsTable.addContainerProperty("bestanden", CheckBox.class,
					null, "bestanden?", null, null);

			if (defStufe == VeranstaltungsStufen.STUFE_BGH1
					|| defStufe == VeranstaltungsStufen.STUFE_BGH2
					|| defStufe == VeranstaltungsStufen.STUFE_BGH3) {
				anmeldungsTable.addContainerProperty("gespunkte",
						TextField.class, "0", "Gesamtpunkte", null, null);
				anmeldungsTable.addContainerProperty("textbewertung",
						Label.class, null, "Bewertung", null, null);

			} else if (defStufe == VeranstaltungsStufen.STUFE_RBP4_M_WASSER
					|| defStufe == VeranstaltungsStufen.STUFE_RBP4_O_WASSER
					|| defStufe == VeranstaltungsStufen.STUFE_GAP1
					|| defStufe == VeranstaltungsStufen.STUFE_GAP2
					|| defStufe == VeranstaltungsStufen.STUFE_GAP3

			) {
				anmeldungsTable.addContainerProperty("uebung1", TextField.class,
						"0", "Übung 1", null, null);
				anmeldungsTable.addContainerProperty("uebung2", TextField.class,
						"0", "Übung 2", null, null);
				anmeldungsTable.addContainerProperty("uebung3", TextField.class,
						"0", "Übung 3", null, null);
				anmeldungsTable.addContainerProperty("uebung4", TextField.class,
						"0", "Übung 4", null, null);
				anmeldungsTable.addContainerProperty("uebung5", TextField.class,
						"0", "Übung 5", null, null);
				anmeldungsTable.addContainerProperty("gespunkte",
						TextField.class, "0", "Gesamtpunkte", null, null);
				anmeldungsTable.addContainerProperty("textbewertung",
						Label.class, null, "Bewertung", null, null);

			} else if (defStufe == VeranstaltungsStufen.STUFE_RBP1) {
				anmeldungsTable.addContainerProperty("uebung1", TextField.class,
						"0", "Übung 1", null, null);
				anmeldungsTable.addContainerProperty("uebung2", TextField.class,
						"0", "Übung 2", null, null);
				anmeldungsTable.addContainerProperty("uebung3", TextField.class,
						"0", "Übung 3", null, null);
				anmeldungsTable.addContainerProperty("uebung4", TextField.class,
						"0", "Übung 4", null, null);
				anmeldungsTable.addContainerProperty("uebung5", TextField.class,
						"0", "Übung 5", null, null);
				anmeldungsTable.addContainerProperty("uebung6", TextField.class,
						"0", "Übung 6", null, null);
				anmeldungsTable.addContainerProperty("gespunkte",
						TextField.class, "0", "Gesamtpunkte", null, null);
				anmeldungsTable.addContainerProperty("textbewertung",
						Label.class, null, "Bewertung", null, null);

			} else if (defStufe == VeranstaltungsStufen.STUFE_RBP2
					|| defStufe == VeranstaltungsStufen.STUFE_RBP3

			) {
				anmeldungsTable.addContainerProperty("uebung1", TextField.class,
						"0", "Übung 1", null, null);
				anmeldungsTable.addContainerProperty("uebung2", TextField.class,
						"0", "Übung 2", null, null);
				anmeldungsTable.addContainerProperty("uebung3", TextField.class,
						"0", "Übung 3", null, null);
				anmeldungsTable.addContainerProperty("uebung4", TextField.class,
						"0", "Übung 4", null, null);
				anmeldungsTable.addContainerProperty("uebung5", TextField.class,
						"0", "Übung 5", null, null);
				anmeldungsTable.addContainerProperty("uebung6", TextField.class,
						"0", "Übung 6", null, null);
				anmeldungsTable.addContainerProperty("uebung7", TextField.class,
						"0", "Übung 7", null, null);
				anmeldungsTable.addContainerProperty("gespunkte",
						TextField.class, "0", "Gesamtpunkte", null, null);
				anmeldungsTable.addContainerProperty("textbewertung",
						Label.class, null, "Bewertung", null, null);

			}

			anmeldungsTable.addContainerProperty("fuehrer", TextArea.class, "",
					"abw. Hundeführer", null, null);

			anmeldungsTable.addContainerProperty("del", Button.class, null,
					"del", null, null);

			veranstaltungsTeilnehmer.addContainerFilter(new Equal(
					"id_veranstaltung", veranstaltung.getItemProperty(
							"id_veranstaltung").getValue()));
			veranstaltungsTeilnehmer
					.addContainerFilter(new Equal("id_stufe",
							veranstaltungsStufe.getItemProperty("id_stufe")
									.getValue()));

			for (Object objTeilnehmer : veranstaltungsTeilnehmer.getItemIds()) {
				final Item currentItem = veranstaltungsTeilnehmer
						.getItem(objTeilnehmer);
				buildTableRow(currentItem);

				Integer size = delMap.size() + 1;
				delMap.put(size, objTeilnehmer);

			}
			veranstaltungsTeilnehmer.removeAllContainerFilters();

			// anmeldungsTable.setPageLength(anmeldungsTable.size());
			anmeldungsTable.setSizeFull();
			anmeldungsTable.setImmediate(true);
			anmeldungsPanelLayout.addComponent(buttonLeiste);
			tableLayout.addComponent(anmeldungsTable);
			anmeldungsPanelLayout.addComponent(tableLayout);
			anmeldungsPanelLayout.setSpacing(false);

			setCompositionRoot(anmeldungsPanelLayout);
		}

		public void addAnmeldung(Item person, Item hund) {
			Object neueAnmeldung = veranstaltungsTeilnehmer.addItem();
			final Item neueAnmeldungItem = veranstaltungsTeilnehmer
					.getItemUnfiltered(neueAnmeldung);
			neueAnmeldungItem.getItemProperty("id_person").setValue(
					person.getItemProperty("idperson").getValue());
			neueAnmeldungItem.getItemProperty("id_hund").setValue(
					hund.getItemProperty("idhund").getValue());
			neueAnmeldungItem.getItemProperty("id_veranstaltung").setValue(
					this.veranstaltung.getItemProperty("id_veranstaltung")
							.getValue());
			neueAnmeldungItem.getItemProperty("id_stufe").setValue(
					this.veranstaltungsStufe.getItemProperty("id_stufe")
							.getValue());
			neueAnmeldungItem.getItemProperty("bezahlt").setValue("N");
			neueAnmeldungItem.getItemProperty("bestanden").setValue("N");

			Integer size = delMap.size() + 1;
			delMap.put(size, neueAnmeldung);

			buildTableRow(neueAnmeldungItem);
			anmeldungsTable.setPageLength(anmeldungsTable.size());
		}

		public void removePrintComponent() {
			if (!(this.currentPrintComponent == null)) {
				this.anmeldungsPanelLayout
						.removeComponent(this.currentPrintComponent);
			}
		}

		public void buildTableRow(Item veranstaltungsTeilnehmerItem) {

			Integer size = itemMap.size() + 1;
			itemMap.put(size, veranstaltungsTeilnehmerItem);

			personContainer.addContainerFilter(new Equal("idperson",
					veranstaltungsTeilnehmerItem.getItemProperty("id_person")
							.getValue()));
			String besitzer = personContainer
					.getItem(personContainer.firstItemId())
					.getItemProperty("nachname").getValue().toString()
					+ " "
					+ personContainer.getItem(personContainer.firstItemId())
							.getItemProperty("vorname").getValue().toString();

			personContainer.removeAllContainerFilters();

			hundContainer.addContainerFilter(new Equal("idhund",
					veranstaltungsTeilnehmerItem.getItemProperty("id_hund")
							.getValue()));
			String hund = hundContainer.getItem(hundContainer.firstItemId())
					.getItemProperty("rufname").getValue().toString()
					+ " - "
					+ hundContainer.getItem(hundContainer.firstItemId())
							.getItemProperty("zwingername").getValue()
							.toString();
			hundContainer.removeAllContainerFilters();

			final CheckBox bezahltBox = new CheckBox();
			bezahltBox.setData(size);
			bezahltBox
					.setValue(veranstaltungsTeilnehmerItem
							.getItemProperty("bezahlt") == null
							|| veranstaltungsTeilnehmerItem
									.getItemProperty("bezahlt").getValue()
									.toString().equals(new String("J")) ? true
							: false);
			bezahltBox.setImmediate(true);
			bezahltBox.addValueChangeListener(new ValueChangeListener() {

				@Override
				public void valueChange(ValueChangeEvent event) {

					System.out.println("in event bezahlt");
					Item boxVeranstaltungsTeilnehmerItem = itemMap
							.get(bezahltBox.getData());
					System.out.println("Item: "
							+ boxVeranstaltungsTeilnehmerItem);
					boxVeranstaltungsTeilnehmerItem
							.getItemProperty("bezahlt")
							.setValue(
									(bezahltBox.getValue() == true) ? new String(
											"J") : new String("N"));

				}

			});

			final CheckBox bestandenBox = new CheckBox();
			bestandenBox.setData(size);
			bestandenBox.setValue(veranstaltungsTeilnehmerItem.getItemProperty(
					"bestanden").getValue() == null
					|| veranstaltungsTeilnehmerItem
							.getItemProperty("bestanden").getValue().toString()
							.equals(new String("J")) ? true : false);
			bestandenBox.setImmediate(true);
			bestandenBox.addValueChangeListener(new ValueChangeListener() {

				@Override
				public void valueChange(ValueChangeEvent event) {
					System.out.println("in event bestanden");
					Item boxVeranstaltungsTeilnehmerItem = itemMap
							.get(bestandenBox.getData());
					boxVeranstaltungsTeilnehmerItem
							.getItemProperty("bestanden")
							.setValue(
									(bestandenBox.getValue() == true) ? new String(
											"J") : new String("N"));

				}

			});

			final TextField punkteUebung1 = new TextField();

			punkteUebung1.setPropertyDataSource(veranstaltungsTeilnehmerItem
					.getItemProperty("uebung1"));
			punkteUebung1.setNullRepresentation("");
			punkteUebung1.setImmediate(true);
			punkteUebung1.setData(size);

			punkteUebung1.addValueChangeListener(new ValueChangeListener() {

				@Override
				public void valueChange(ValueChangeEvent event) {
					// TODO Auto-generated method stub
					System.out.println("event: "
							+ event.getProperty().getValue());
					Integer id = (Integer) punkteUebung1.getData();

					TextArea gesPunkte = ((TextArea) anmeldungsTable
							.getContainerProperty(id, "gespunkte").getValue());

					gesPunkte.setValue(getGesPunkteForRow(anmeldungsTable, id)
							.toString());

				}

			});

			final TextField punkteUebung2 = new TextField();
			punkteUebung2.setPropertyDataSource(veranstaltungsTeilnehmerItem
					.getItemProperty("uebung2"));
			punkteUebung2.setNullRepresentation("");
			punkteUebung2.setImmediate(true);
			punkteUebung2.setData(size);
			punkteUebung2.addValueChangeListener(new ValueChangeListener() {

				@Override
				public void valueChange(ValueChangeEvent event) {
					// TODO Auto-generated method stub
					Integer id = (Integer) punkteUebung2.getData();
					TextArea gesPunkte = ((TextArea) anmeldungsTable
							.getContainerProperty(id, "gespunkte").getValue());
					gesPunkte.setValue(getGesPunkteForRow(anmeldungsTable, id)
							.toString());

				}

			});
			final TextField punkteUebung3 = new TextField();
			punkteUebung3.setPropertyDataSource(veranstaltungsTeilnehmerItem
					.getItemProperty("uebung3"));
			punkteUebung3.setNullRepresentation("");
			punkteUebung3.setImmediate(true);
			punkteUebung3.setData(size);
			punkteUebung3.addValueChangeListener(new ValueChangeListener() {
				@Override
				public void valueChange(ValueChangeEvent event) {
					// TODO Auto-generated method stub
					Integer id = (Integer) punkteUebung3.getData();
					TextArea gesPunkte = ((TextArea) anmeldungsTable
							.getContainerProperty(id, "gespunkte").getValue());
					gesPunkte.setValue(getGesPunkteForRow(anmeldungsTable, id)
							.toString());

				}

			});
			final TextField punkteUebung4 = new TextField();
			punkteUebung4.setPropertyDataSource(veranstaltungsTeilnehmerItem
					.getItemProperty("uebung4"));
			punkteUebung4.setNullRepresentation("");
			punkteUebung4.setImmediate(true);
			punkteUebung4.setData(size);
			punkteUebung4.addValueChangeListener(new ValueChangeListener() {

				@Override
				public void valueChange(ValueChangeEvent event) {
					// TODO Auto-generated method stub
					Integer id = (Integer) punkteUebung4.getData();
					TextArea gesPunkte = ((TextArea) anmeldungsTable
							.getContainerProperty(id, "gespunkte").getValue());
					gesPunkte.setValue(getGesPunkteForRow(anmeldungsTable, id)
							.toString());
				}

			});
			final TextField punkteUebung5 = new TextField();
			punkteUebung5.setPropertyDataSource(veranstaltungsTeilnehmerItem
					.getItemProperty("uebung5"));
			punkteUebung5.setNullRepresentation("");
			punkteUebung5.setImmediate(true);
			punkteUebung5.setData(size);
			punkteUebung5.addValueChangeListener(new ValueChangeListener() {

				@Override
				public void valueChange(ValueChangeEvent event) {
					// TODO Auto-generated method stub
					Integer id = (Integer) punkteUebung5.getData();
					TextArea gesPunkte = ((TextArea) anmeldungsTable
							.getContainerProperty(id, "gespunkte").getValue());
					gesPunkte.setValue(getGesPunkteForRow(anmeldungsTable, id)
							.toString());

				}

			});
			final TextField punkteUebung6 = new TextField();
			punkteUebung6.setPropertyDataSource(veranstaltungsTeilnehmerItem
					.getItemProperty("uebung6"));
			punkteUebung6.setNullRepresentation("");
			punkteUebung6.setImmediate(true);
			punkteUebung6.setData(size);
			punkteUebung6.addValueChangeListener(new ValueChangeListener() {

				@Override
				public void valueChange(ValueChangeEvent event) {
					// TODO Auto-generated method stub
					Integer id = (Integer) punkteUebung6.getData();
					TextArea gesPunkte = ((TextArea) anmeldungsTable
							.getContainerProperty(id, "gespunkte").getValue());
					gesPunkte.setValue(getGesPunkteForRow(anmeldungsTable, id)
							.toString());

				}

			});
			final TextField punkteUebung7 = new TextField();
			punkteUebung7.setPropertyDataSource(veranstaltungsTeilnehmerItem
					.getItemProperty("uebung7"));
			punkteUebung7.setNullRepresentation("");
			punkteUebung7.setImmediate(true);
			punkteUebung7.setData(size);
			punkteUebung7.addValueChangeListener(new ValueChangeListener() {

				@Override
				public void valueChange(ValueChangeEvent event) {
					// TODO Auto-generated method stub
					Integer id = (Integer) punkteUebung7.getData();

					TextArea gesPunkte = ((TextArea) anmeldungsTable
							.getContainerProperty(id, "gespunkte").getValue());
					gesPunkte.setValue(getGesPunkteForRow(anmeldungsTable, id)
							.toString());
				}

			});

			final TextField gesPunkte = new TextField();
			gesPunkte.setPropertyDataSource(veranstaltungsTeilnehmerItem
					.getItemProperty("ges_punkte"));
			gesPunkte.setNullRepresentation("");
			gesPunkte.setImmediate(true);
			gesPunkte.setData(size);
			gesPunkte.addValueChangeListener(new ValueChangeListener() {

				@Override
				public void valueChange(ValueChangeEvent event) {
					Integer id = (Integer) gesPunkte.getData();
					Label bewertungLabel = ((Label) anmeldungsTable
							.getContainerProperty(id, "textbewertung")
							.getValue());
					Integer wert = 0;
					try {
						wert = Integer.parseInt(gesPunkte.getValue());
					} catch (NumberFormatException ignored) {

					}

					bewertungLabel.setValue(defStufe.getBewertung(wert));

				}

			});

			final TextArea abwHundeFuehrer = new TextArea();
			abwHundeFuehrer.setPropertyDataSource(veranstaltungsTeilnehmerItem
					.getItemProperty("hundefuehrer"));
			abwHundeFuehrer.setRows(1);
			abwHundeFuehrer.setNullRepresentation("");
			abwHundeFuehrer.setImmediate(true);
			abwHundeFuehrer.setData(size);

			final Label bewertung = new Label();
			bewertung.setData(size);
			if (veranstaltungsTeilnehmerItem.getItemProperty("ges_punkte")
					.getValue() != null) {
				bewertung.setValue(defStufe.getBewertung(new Integer(
						veranstaltungsTeilnehmerItem
								.getItemProperty("ges_punkte").getValue()
								.toString())));
			}

			final Button delButton = new Button();
			delButton.setData(size);
			delButton.setIcon(FontAwesome.BITBUCKET);
			delButton.addStyleName(ValoTheme.BUTTON_ICON_ONLY);

			delButton.addClickListener(new ClickListener() {

				@Override
				public void buttonClick(ClickEvent event) {
					Item delItem = itemMap.get(delButton.getData());
					veranstaltungsTeilnehmer.removeItem(delMap.get(delButton
							.getData()));
					anmeldungsTable.removeItem(delButton.getData());

				}

			});
			if (defStufe == VeranstaltungsStufen.STUFE_BH) {
				anmeldungsTable.addItem(new Object[] { besitzer, hund,
						bezahltBox, bestandenBox, abwHundeFuehrer, delButton },
						size);

			} else if (defStufe == VeranstaltungsStufen.STUFE_BGH1
					|| defStufe == VeranstaltungsStufen.STUFE_BGH2
					|| defStufe == VeranstaltungsStufen.STUFE_BGH3) {

				anmeldungsTable.addItem(new Object[] { besitzer, hund,
						bezahltBox, bestandenBox, gesPunkte, bewertung,
						abwHundeFuehrer, delButton }, size);

			} else if (defStufe == VeranstaltungsStufen.STUFE_RBP4_M_WASSER
					|| defStufe == VeranstaltungsStufen.STUFE_RBP4_O_WASSER
					|| defStufe == VeranstaltungsStufen.STUFE_GAP1
					|| defStufe == VeranstaltungsStufen.STUFE_GAP2
					|| defStufe == VeranstaltungsStufen.STUFE_GAP3) {
				anmeldungsTable.addItem(new Object[] { besitzer, hund,
						bezahltBox, bestandenBox, punkteUebung1, punkteUebung2,
						punkteUebung3, punkteUebung4, punkteUebung5, gesPunkte,
						bewertung, abwHundeFuehrer, delButton }, size);

			} else if (defStufe == VeranstaltungsStufen.STUFE_RBP1

			) {
				anmeldungsTable.addItem(new Object[] { besitzer, hund,
						bezahltBox, bestandenBox, punkteUebung1, punkteUebung2,
						punkteUebung3, punkteUebung4, punkteUebung5,
						punkteUebung6, gesPunkte, bewertung, abwHundeFuehrer,
						delButton }, size);

			} else if (defStufe == VeranstaltungsStufen.STUFE_RBP2
					|| defStufe == VeranstaltungsStufen.STUFE_RBP3) {
				anmeldungsTable.addItem(new Object[] { besitzer, hund,
						bezahltBox, bestandenBox, punkteUebung1, punkteUebung2,
						punkteUebung3, punkteUebung4, punkteUebung5,
						punkteUebung6, punkteUebung7, gesPunkte, bewertung,
						abwHundeFuehrer, delButton }, size);

			}

		}
	}

	public void refresh() {
		this.mainLayout.removeAllComponents();
		this.buildMainLayout();
	}

	protected Integer getGesPunkteForRow(Table anmeldungsTable, int row) {

		Integer result = 0;
		for (int i = 1; i <= 7; i++) {
			Property zwProperty = anmeldungsTable.getContainerProperty(row,
					"uebung" + i);
			if (!(zwProperty == null)) {
				System.out.println("zwProperty" + zwProperty.getType());
				TextArea zw = ((TextArea) zwProperty.getValue());
				try {
					result = result + Integer.parseInt(zw.getValue());
				} catch (NumberFormatException ignored) {

				}
			}

		}

		return result;
	}

	public interface VeranstaltungsDetailListener {
		void titleChanged(String newTitle, VeranstaltungsDetailView detail);
	}

}
